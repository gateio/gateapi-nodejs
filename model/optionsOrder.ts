/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Options order detail
 */
export class OptionsOrder {
    /**
     * Options order ID
     */
    'id'?: number;
    /**
     * User ID
     */
    'user'?: number;
    /**
     * Creation time of order
     */
    'createTime'?: number;
    /**
     * Order finished time. Not returned if order is open
     */
    'finishTime'?: number;
    /**
     * 结束方式，包括：  - filled: 完全成交 - cancelled: 用户撤销 - liquidated: 强制平仓撤销 - ioc: 未立即完全成交，因为tif设置为ioc - auto_deleveraged: 自动减仓撤销 - reduce_only: 增持仓位撤销，因为设置reduce_only或平仓 - position_closed: 因为仓位平掉了，所以挂单被撤掉 - reduce_out: 只减仓被排除的不容易成交的挂单 - mmp_cancelled: MMP撤销
     */
    'finishAs'?: OptionsOrder.FinishAs;
    /**
     * Order status  - `open`: waiting to be traded - `finished`: finished
     */
    'status'?: OptionsOrder.Status;
    /**
     * Contract name
     */
    'contract': string;
    /**
     * Order size. Specify positive number to make a bid, and negative number to ask
     */
    'size': number;
    /**
     * Display size for iceberg order. 0 for non-iceberg. Note that you will have to pay the taker fee for the hidden size
     */
    'iceberg'?: number;
    /**
     * Order price. 0 for market order with `tif` set as `ioc` (USDT)
     */
    'price'?: string;
    /**
     * Set as `true` to close the position, with `size` set to 0
     */
    'close'?: boolean;
    /**
     * Is the order to close position
     */
    'isClose'?: boolean;
    /**
     * Set as `true` to be reduce-only order
     */
    'reduceOnly'?: boolean;
    /**
     * Is the order reduce-only
     */
    'isReduceOnly'?: boolean;
    /**
     * Is the order for liquidation
     */
    'isLiq'?: boolean;
    /**
     * 设置为 true 的时候，为MMP委托
     */
    'mmp'?: boolean;
    /**
     * 是否为MMP委托。对应请求中的`mmp`。
     */
    'isMmp'?: boolean;
    /**
     * Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee
     */
    'tif'?: OptionsOrder.Tif;
    /**
     * Size left to be traded
     */
    'left'?: number;
    /**
     * Fill price of the order
     */
    'fillPrice'?: string;
    /**
     * User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.) Besides user defined information, reserved contents are listed below, denoting how the order is created:  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance
     */
    'text'?: string;
    /**
     * Taker fee
     */
    'tkfr'?: string;
    /**
     * Maker fee
     */
    'mkfr'?: string;
    /**
     * Reference user ID
     */
    'refu'?: number;
    /**
     * Referrer rebate
     */
    'refr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'id',
            baseName: 'id',
            type: 'number',
        },
        {
            name: 'user',
            baseName: 'user',
            type: 'number',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'number',
        },
        {
            name: 'finishTime',
            baseName: 'finish_time',
            type: 'number',
        },
        {
            name: 'finishAs',
            baseName: 'finish_as',
            type: 'OptionsOrder.FinishAs',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'OptionsOrder.Status',
        },
        {
            name: 'contract',
            baseName: 'contract',
            type: 'string',
        },
        {
            name: 'size',
            baseName: 'size',
            type: 'number',
        },
        {
            name: 'iceberg',
            baseName: 'iceberg',
            type: 'number',
        },
        {
            name: 'price',
            baseName: 'price',
            type: 'string',
        },
        {
            name: 'close',
            baseName: 'close',
            type: 'boolean',
        },
        {
            name: 'isClose',
            baseName: 'is_close',
            type: 'boolean',
        },
        {
            name: 'reduceOnly',
            baseName: 'reduce_only',
            type: 'boolean',
        },
        {
            name: 'isReduceOnly',
            baseName: 'is_reduce_only',
            type: 'boolean',
        },
        {
            name: 'isLiq',
            baseName: 'is_liq',
            type: 'boolean',
        },
        {
            name: 'mmp',
            baseName: 'mmp',
            type: 'boolean',
        },
        {
            name: 'isMmp',
            baseName: 'is_mmp',
            type: 'boolean',
        },
        {
            name: 'tif',
            baseName: 'tif',
            type: 'OptionsOrder.Tif',
        },
        {
            name: 'left',
            baseName: 'left',
            type: 'number',
        },
        {
            name: 'fillPrice',
            baseName: 'fill_price',
            type: 'string',
        },
        {
            name: 'text',
            baseName: 'text',
            type: 'string',
        },
        {
            name: 'tkfr',
            baseName: 'tkfr',
            type: 'string',
        },
        {
            name: 'mkfr',
            baseName: 'mkfr',
            type: 'string',
        },
        {
            name: 'refu',
            baseName: 'refu',
            type: 'number',
        },
        {
            name: 'refr',
            baseName: 'refr',
            type: 'string',
        },
    ];

    static getAttributeTypeMap() {
        return OptionsOrder.attributeTypeMap;
    }
}

export namespace OptionsOrder {
    export enum FinishAs {
        Filled = <any>'filled',
        Cancelled = <any>'cancelled',
        Liquidated = <any>'liquidated',
        Ioc = <any>'ioc',
        AutoDeleveraged = <any>'auto_deleveraged',
        ReduceOnly = <any>'reduce_only',
        PositionClosed = <any>'position_closed',
        ReduceOut = <any>'reduce_out',
        MmpCancelled = <any>'mmp_cancelled',
    }
    export enum Status {
        Open = <any>'open',
        Finished = <any>'finished',
    }
    export enum Tif {
        Gtc = <any>'gtc',
        Ioc = <any>'ioc',
        Poc = <any>'poc',
    }
}
