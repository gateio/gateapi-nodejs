/**
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Options order details
 */
export class OptionsOrder {
    /**
     * Options order ID
     */
    'id'?: number;
    /**
     * User ID
     */
    'user'?: number;
    /**
     * Creation time of order
     */
    'createTime'?: number;
    /**
     * Order finished time. Not returned if order is open
     */
    'finishTime'?: number;
    /**
     * Order finish reason:  - filled: Fully filled - cancelled: User cancelled - liquidated: Cancelled due to liquidation - ioc: Not immediately fully filled due to IOC time-in-force setting - auto_deleveraged: Cancelled due to auto-deleveraging - reduce_only: Cancelled due to position increase while reduce-only is set - position_closed: Cancelled because the position was closed - reduce_out: Only reduce positions by excluding hard-to-fill orders - mmp_cancelled: Cancelled by MMP
     */
    'finishAs'?: OptionsOrder.FinishAs;
    /**
     * Order status  - `open`: Pending - `finished`: Completed
     */
    'status'?: OptionsOrder.Status;
    /**
     * Options identifier
     */
    'contract': string;
    /**
     * Required. Trading quantity. Positive for buy, negative for sell. Set to 0 for close position orders.
     */
    'size': number;
    /**
     * Display size for iceberg orders. 0 for non-iceberg orders. Note that hidden portions are charged taker fees.
     */
    'iceberg'?: number;
    /**
     * Order price. Price of 0 with `tif` set as `ioc` represents market order (quote currency)
     */
    'price'?: string;
    /**
     * Set as `true` to close the position, with `size` set to 0
     */
    'close'?: boolean;
    /**
     * Is the order to close position
     */
    'isClose'?: boolean;
    /**
     * Set as `true` to be reduce-only order
     */
    'reduceOnly'?: boolean;
    /**
     * Is the order reduce-only
     */
    'isReduceOnly'?: boolean;
    /**
     * Is the order for liquidation
     */
    'isLiq'?: boolean;
    /**
     * When set to true, it is an MMP order
     */
    'mmp'?: boolean;
    /**
     * Whether it is an MMP order. Corresponds to `mmp` in the request
     */
    'isMmp'?: boolean;
    /**
     * Time in force strategy. Market orders currently only support IOC mode  - gtc: Good Till Cancelled - ioc: Immediate Or Cancelled, execute immediately or cancel, taker only - poc: Pending Or Cancelled, passive order, maker only
     */
    'tif'?: OptionsOrder.Tif;
    /**
     * Unfilled quantity
     */
    'left'?: number;
    /**
     * Fill price
     */
    'fillPrice'?: string;
    /**
     * User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.) Besides user defined information, reserved contents are listed below, denoting how the order is created:  - web: from web - api: from API - app: from mobile phones - auto_deleveraging: from ADL - liquidation: from liquidation - insurance: from insurance
     */
    'text'?: string;
    /**
     * Taker fee
     */
    'tkfr'?: string;
    /**
     * Maker fee
     */
    'mkfr'?: string;
    /**
     * Referrer user ID
     */
    'refu'?: number;
    /**
     * Referrer rebate
     */
    'refr'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'id',
            baseName: 'id',
            type: 'number',
        },
        {
            name: 'user',
            baseName: 'user',
            type: 'number',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'number',
        },
        {
            name: 'finishTime',
            baseName: 'finish_time',
            type: 'number',
        },
        {
            name: 'finishAs',
            baseName: 'finish_as',
            type: 'OptionsOrder.FinishAs',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'OptionsOrder.Status',
        },
        {
            name: 'contract',
            baseName: 'contract',
            type: 'string',
        },
        {
            name: 'size',
            baseName: 'size',
            type: 'number',
        },
        {
            name: 'iceberg',
            baseName: 'iceberg',
            type: 'number',
        },
        {
            name: 'price',
            baseName: 'price',
            type: 'string',
        },
        {
            name: 'close',
            baseName: 'close',
            type: 'boolean',
        },
        {
            name: 'isClose',
            baseName: 'is_close',
            type: 'boolean',
        },
        {
            name: 'reduceOnly',
            baseName: 'reduce_only',
            type: 'boolean',
        },
        {
            name: 'isReduceOnly',
            baseName: 'is_reduce_only',
            type: 'boolean',
        },
        {
            name: 'isLiq',
            baseName: 'is_liq',
            type: 'boolean',
        },
        {
            name: 'mmp',
            baseName: 'mmp',
            type: 'boolean',
        },
        {
            name: 'isMmp',
            baseName: 'is_mmp',
            type: 'boolean',
        },
        {
            name: 'tif',
            baseName: 'tif',
            type: 'OptionsOrder.Tif',
        },
        {
            name: 'left',
            baseName: 'left',
            type: 'number',
        },
        {
            name: 'fillPrice',
            baseName: 'fill_price',
            type: 'string',
        },
        {
            name: 'text',
            baseName: 'text',
            type: 'string',
        },
        {
            name: 'tkfr',
            baseName: 'tkfr',
            type: 'string',
        },
        {
            name: 'mkfr',
            baseName: 'mkfr',
            type: 'string',
        },
        {
            name: 'refu',
            baseName: 'refu',
            type: 'number',
        },
        {
            name: 'refr',
            baseName: 'refr',
            type: 'string',
        },
    ];

    static getAttributeTypeMap() {
        return OptionsOrder.attributeTypeMap;
    }
}

export namespace OptionsOrder {
    export enum FinishAs {
        Filled = <any>'filled',
        Cancelled = <any>'cancelled',
        Liquidated = <any>'liquidated',
        Ioc = <any>'ioc',
        AutoDeleveraged = <any>'auto_deleveraged',
        ReduceOnly = <any>'reduce_only',
        PositionClosed = <any>'position_closed',
        ReduceOut = <any>'reduce_out',
        MmpCancelled = <any>'mmp_cancelled',
    }
    export enum Status {
        Open = <any>'open',
        Finished = <any>'finished',
    }
    export enum Tif {
        Gtc = <any>'gtc',
        Ioc = <any>'ioc',
        Poc = <any>'poc',
    }
}
