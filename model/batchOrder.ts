/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Batch order details
 */
export class BatchOrder {
    /**
     * User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)
     */
    'text'?: string;
    /**
     * Whether order succeeds
     */
    'succeeded'?: boolean;
    /**
     * Error label, empty string if order succeeds
     */
    'label'?: string;
    /**
     * Detailed error message, empty string if order succeeds
     */
    'message'?: string;
    /**
     * Order ID
     */
    'id'?: string;
    /**
     * Order creation time
     */
    'createTime'?: string;
    /**
     * Order last modification time
     */
    'updateTime'?: string;
    /**
     * Order status  - `open`: to be filled - `closed`: filled - `cancelled`: cancelled
     */
    'status'?: BatchOrder.Status;
    /**
     * Currency pair
     */
    'currencyPair'?: string;
    /**
     * Order type. limit - limit order
     */
    'type'?: BatchOrder.Type;
    /**
     * Account type. spot - use spot account; margin - use margin account
     */
    'account'?: BatchOrder.Account;
    /**
     * Order side
     */
    'side'?: BatchOrder.Side;
    /**
     * Trade amount
     */
    'amount'?: string;
    /**
     * Order price
     */
    'price'?: string;
    /**
     * Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee
     */
    'timeInForce'?: BatchOrder.TimeInForce;
    /**
     * Amount to display for the iceberg order. Null or 0 for normal orders. Set to -1 to hide the amount totally
     */
    'iceberg'?: string;
    /**
     * Used in margin trading(i.e. `account` is `margin`) to allow automatic loan of insufficient part if balance is not enough.
     */
    'autoBorrow'?: boolean;
    /**
     * Amount left to fill
     */
    'left'?: string;
    /**
     * Total filled in quote currency. Deprecated in favor of `filled_total`
     */
    'fillPrice'?: string;
    /**
     * Total filled in quote currency
     */
    'filledTotal'?: string;
    /**
     * Fee deducted
     */
    'fee'?: string;
    /**
     * Fee currency unit
     */
    'feeCurrency'?: string;
    /**
     * Point used to deduct fee
     */
    'pointFee'?: string;
    /**
     * GT used to deduct fee
     */
    'gtFee'?: string;
    /**
     * Whether GT fee discount is used
     */
    'gtDiscount'?: boolean;
    /**
     * Rebated fee
     */
    'rebatedFee'?: string;
    /**
     * Rebated fee currency unit
     */
    'rebatedFeeCurrency'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'text',
            baseName: 'text',
            type: 'string',
        },
        {
            name: 'succeeded',
            baseName: 'succeeded',
            type: 'boolean',
        },
        {
            name: 'label',
            baseName: 'label',
            type: 'string',
        },
        {
            name: 'message',
            baseName: 'message',
            type: 'string',
        },
        {
            name: 'id',
            baseName: 'id',
            type: 'string',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'string',
        },
        {
            name: 'updateTime',
            baseName: 'update_time',
            type: 'string',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'BatchOrder.Status',
        },
        {
            name: 'currencyPair',
            baseName: 'currency_pair',
            type: 'string',
        },
        {
            name: 'type',
            baseName: 'type',
            type: 'BatchOrder.Type',
        },
        {
            name: 'account',
            baseName: 'account',
            type: 'BatchOrder.Account',
        },
        {
            name: 'side',
            baseName: 'side',
            type: 'BatchOrder.Side',
        },
        {
            name: 'amount',
            baseName: 'amount',
            type: 'string',
        },
        {
            name: 'price',
            baseName: 'price',
            type: 'string',
        },
        {
            name: 'timeInForce',
            baseName: 'time_in_force',
            type: 'BatchOrder.TimeInForce',
        },
        {
            name: 'iceberg',
            baseName: 'iceberg',
            type: 'string',
        },
        {
            name: 'autoBorrow',
            baseName: 'auto_borrow',
            type: 'boolean',
        },
        {
            name: 'left',
            baseName: 'left',
            type: 'string',
        },
        {
            name: 'fillPrice',
            baseName: 'fill_price',
            type: 'string',
        },
        {
            name: 'filledTotal',
            baseName: 'filled_total',
            type: 'string',
        },
        {
            name: 'fee',
            baseName: 'fee',
            type: 'string',
        },
        {
            name: 'feeCurrency',
            baseName: 'fee_currency',
            type: 'string',
        },
        {
            name: 'pointFee',
            baseName: 'point_fee',
            type: 'string',
        },
        {
            name: 'gtFee',
            baseName: 'gt_fee',
            type: 'string',
        },
        {
            name: 'gtDiscount',
            baseName: 'gt_discount',
            type: 'boolean',
        },
        {
            name: 'rebatedFee',
            baseName: 'rebated_fee',
            type: 'string',
        },
        {
            name: 'rebatedFeeCurrency',
            baseName: 'rebated_fee_currency',
            type: 'string',
        },
    ];

    static getAttributeTypeMap() {
        return BatchOrder.attributeTypeMap;
    }
}

export namespace BatchOrder {
    export enum Status {
        Open = <any>'open',
        Closed = <any>'closed',
        Cancelled = <any>'cancelled',
    }
    export enum Type {
        Limit = <any>'limit',
    }
    export enum Account {
        Spot = <any>'spot',
        Margin = <any>'margin',
    }
    export enum Side {
        Buy = <any>'buy',
        Sell = <any>'sell',
    }
    export enum TimeInForce {
        Gtc = <any>'gtc',
        Ioc = <any>'ioc',
        Poc = <any>'poc',
    }
}
