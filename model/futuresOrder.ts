/**
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Futures order details.
 */
export class FuturesOrder {
    /**
     * Futures order ID.
     */
    'id'?: bigint;
    /**
     * User ID.
     */
    'user'?: number;
    /**
     * Creation time of order.
     */
    'createTime'?: number;
    /**
     * Order finished time. Not returned if order is open.
     */
    'finishTime'?: number;
    /**
     * How the order was finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is `IOC`, finish immediately - auto_deleveraged: finished by ADL - increasing position while `reduce-only` set- position_closed: cancelled because of position close - position_closed: canceled because the position was closed - reduce_out: only reduce positions by excluding hard-to-fill orders - stp: cancelled because self trade prevention
     */
    'finishAs'?: FuturesOrder.FinishAs;
    /**
     * Order status  - `open`: waiting to be traded - `finished`: finished
     */
    'status'?: FuturesOrder.Status;
    /**
     * Futures contract.
     */
    'contract': string;
    /**
     * Order size. Specify positive number to make a bid, and negative number to ask
     */
    'size': number;
    /**
     * Display size for iceberg order. 0 for non-iceberg. Note that you will have to pay the taker fee for the hidden size
     */
    'iceberg'?: number;
    /**
     * Order price. 0 for market order with `tif` set as `ioc`.
     */
    'price'?: string;
    /**
     * Set as `true` to close the position, with `size` set to 0.
     */
    'close'?: boolean;
    /**
     * Is the order to close position.
     */
    'isClose'?: boolean;
    /**
     * Set as `true` to be reduce-only order.
     */
    'reduceOnly'?: boolean;
    /**
     * Is the order reduce-only.
     */
    'isReduceOnly'?: boolean;
    /**
     * Is the order for liquidation.
     */
    'isLiq'?: boolean;
    /**
     * Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none
     */
    'tif'?: FuturesOrder.Tif;
    /**
     * Size left to be traded.
     */
    'left'?: number;
    /**
     * Fill price of the order.
     */
    'fillPrice'?: string;
    /**
     * Order custom information, users can use this field to set a custom ID, and the user-defined field must meet the following conditions:  1. Must start with `t-` 2. If `t-` is not calculated, the length cannot exceed 28 bytes 3. The input content can only contain numbers, letters, underscores (_), midscores (-) or dots (.)  In addition to user-defined information, the following are internal reserved fields that identifies the source of the order:  - web: web page - api: API call - app: mobile terminal - auto_deleveraging: Automatic position reduction - liquidation: Liquidation under the classic account’s old liquidation mode - liq-x: new liquidation mode (isolated, cross margin one-way mode, non-hedging part of cross margin hedge mode) b. Liquidation under isolated margin in unified account single currency margin mode  - hedge-liq-x: Liquidation under the new liquidation mode of the classic account hedge mode, the cross margin hedged part undergoes liquidation, meaning both long and short positions are liquidated simultaneously. - pm_liquidate: Unified account multi-currency margin mode liquidation - comb_margin_liquidate: Unified account portfolio margin mode liquidation - scm_liquidate: Unified account single currency margin mode liquidation - insurance: insurance
     */
    'text'?: string;
    /**
     * Taker fee.
     */
    'tkfr'?: string;
    /**
     * Maker fee.
     */
    'mkfr'?: string;
    /**
     * Reference user ID.
     */
    'refu'?: number;
    /**
     * Set side to close dual-mode position. `close_long` closes the long side; while `close_short` the short one. Note `size` also needs to be set to 0
     */
    'autoSize'?: FuturesOrder.AutoSize;
    /**
     * Orders between users in the same `stp_id` group are not allowed to be self-traded  1. If the `stp_id` of two orders being matched is non-zero and equal, they will not be executed. Instead, the corresponding strategy will be executed based on the `stp_act` of the taker. 2. `stp_id` returns `0` by default for orders that have not been set for `STP group`
     */
    'stpId'?: number;
    /**
     * Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies  1. After users join the `STP Group`, he can pass `stp_act` to limit the user\'s self-trade prevetion strategy. If `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。 3. If the user did not use \'stp_act\' when placing the order, \'stp_act\' will return \'-\'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, new ones - cb: Cancel both, Both old and new orders will be cancelled
     */
    'stpAct'?: FuturesOrder.StpAct;
    /**
     * The custom data that the user remarked when amending the order.
     */
    'amendText'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'id',
            baseName: 'id',
            type: 'bigint',
        },
        {
            name: 'user',
            baseName: 'user',
            type: 'number',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'number',
        },
        {
            name: 'finishTime',
            baseName: 'finish_time',
            type: 'number',
        },
        {
            name: 'finishAs',
            baseName: 'finish_as',
            type: 'FuturesOrder.FinishAs',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'FuturesOrder.Status',
        },
        {
            name: 'contract',
            baseName: 'contract',
            type: 'string',
        },
        {
            name: 'size',
            baseName: 'size',
            type: 'number',
        },
        {
            name: 'iceberg',
            baseName: 'iceberg',
            type: 'number',
        },
        {
            name: 'price',
            baseName: 'price',
            type: 'string',
        },
        {
            name: 'close',
            baseName: 'close',
            type: 'boolean',
        },
        {
            name: 'isClose',
            baseName: 'is_close',
            type: 'boolean',
        },
        {
            name: 'reduceOnly',
            baseName: 'reduce_only',
            type: 'boolean',
        },
        {
            name: 'isReduceOnly',
            baseName: 'is_reduce_only',
            type: 'boolean',
        },
        {
            name: 'isLiq',
            baseName: 'is_liq',
            type: 'boolean',
        },
        {
            name: 'tif',
            baseName: 'tif',
            type: 'FuturesOrder.Tif',
        },
        {
            name: 'left',
            baseName: 'left',
            type: 'number',
        },
        {
            name: 'fillPrice',
            baseName: 'fill_price',
            type: 'string',
        },
        {
            name: 'text',
            baseName: 'text',
            type: 'string',
        },
        {
            name: 'tkfr',
            baseName: 'tkfr',
            type: 'string',
        },
        {
            name: 'mkfr',
            baseName: 'mkfr',
            type: 'string',
        },
        {
            name: 'refu',
            baseName: 'refu',
            type: 'number',
        },
        {
            name: 'autoSize',
            baseName: 'auto_size',
            type: 'FuturesOrder.AutoSize',
        },
        {
            name: 'stpId',
            baseName: 'stp_id',
            type: 'number',
        },
        {
            name: 'stpAct',
            baseName: 'stp_act',
            type: 'FuturesOrder.StpAct',
        },
        {
            name: 'amendText',
            baseName: 'amend_text',
            type: 'string',
        },
    ];

    static getAttributeTypeMap() {
        return FuturesOrder.attributeTypeMap;
    }
}

export namespace FuturesOrder {
    export enum FinishAs {
        Filled = <any>'filled',
        Cancelled = <any>'cancelled',
        Liquidated = <any>'liquidated',
        Ioc = <any>'ioc',
        AutoDeleveraged = <any>'auto_deleveraged',
        ReduceOnly = <any>'reduce_only',
        PositionClosed = <any>'position_closed',
        ReduceOut = <any>'reduce_out',
        Stp = <any>'stp',
    }
    export enum Status {
        Open = <any>'open',
        Finished = <any>'finished',
    }
    export enum Tif {
        Gtc = <any>'gtc',
        Ioc = <any>'ioc',
        Poc = <any>'poc',
        Fok = <any>'fok',
    }
    export enum AutoSize {
        Long = <any>'close_long',
        Short = <any>'close_short',
    }
    export enum StpAct {
        Co = <any>'co',
        Cn = <any>'cn',
        Cb = <any>'cb',
        Minus = <any>'-',
    }
}
