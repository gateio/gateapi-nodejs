/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Futures contract details
 */
export class DeliveryContract {
    /**
     * Futures contract
     */
    'name'?: string;
    /**
     * Underlying
     */
    'underlying'?: string;
    /**
     * Cycle type, e.g. WEEKLY, QUARTERLY
     */
    'cycle'?: DeliveryContract.Cycle;
    /**
     * Futures contract type
     */
    'type'?: DeliveryContract.Type;
    /**
     * Multiplier used in converting from invoicing to settlement currency
     */
    'quantoMultiplier'?: string;
    /**
     * Minimum leverage
     */
    'leverageMin'?: string;
    /**
     * Maximum leverage
     */
    'leverageMax'?: string;
    /**
     * Maintenance rate of margin
     */
    'maintenanceRate'?: string;
    /**
     * Mark price type, internal - based on internal trading, index - based on external index price
     */
    'markType'?: DeliveryContract.MarkType;
    /**
     * Current mark price
     */
    'markPrice'?: string;
    /**
     * Current index price
     */
    'indexPrice'?: string;
    /**
     * Last trading price
     */
    'lastPrice'?: string;
    /**
     * Maker fee rate, where negative means rebate
     */
    'makerFeeRate'?: string;
    /**
     * Taker fee rate
     */
    'takerFeeRate'?: string;
    /**
     * Minimum order price increment
     */
    'orderPriceRound'?: string;
    /**
     * Minimum mark price increment
     */
    'markPriceRound'?: string;
    /**
     * Fair basis rate
     */
    'basisRate'?: string;
    /**
     * Fair basis value
     */
    'basisValue'?: string;
    /**
     * Funding used for calculating impact bid, ask price
     */
    'basisImpactValue'?: string;
    /**
     * Settle price
     */
    'settlePrice'?: string;
    /**
     * Settle price update interval
     */
    'settlePriceInterval'?: number;
    /**
     * Settle price update duration in seconds
     */
    'settlePriceDuration'?: number;
    /**
     * Contract expiry timestamp
     */
    'expireTime'?: number;
    /**
     * Risk limit base
     */
    'riskLimitBase'?: string;
    /**
     * Step of adjusting risk limit
     */
    'riskLimitStep'?: string;
    /**
     * Maximum risk limit the contract allowed
     */
    'riskLimitMax'?: string;
    /**
     * Minimum order size the contract allowed
     */
    'orderSizeMin'?: number;
    /**
     * Maximum order size the contract allowed
     */
    'orderSizeMax'?: number;
    /**
     * deviation between order price and current index price. If price of an order is denoted as order_price, it must meet the following condition:      abs(order_price - mark_price) <= mark_price * order_price_deviate
     */
    'orderPriceDeviate'?: string;
    /**
     * Referral fee rate discount
     */
    'refDiscountRate'?: string;
    /**
     * Referrer commission rate
     */
    'refRebateRate'?: string;
    /**
     * Current orderbook ID
     */
    'orderbookId'?: number;
    /**
     * Current trade ID
     */
    'tradeId'?: number;
    /**
     * Historical accumulated trade size
     */
    'tradeSize'?: number;
    /**
     * Current total long position size
     */
    'positionSize'?: number;
    /**
     * Last changed time of configuration
     */
    'configChangeTime'?: number;
    /**
     * Contract is delisting
     */
    'inDelisting'?: boolean;
    /**
     * Maximum number of open orders
     */
    'ordersLimit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'name',
            baseName: 'name',
            type: 'string',
        },
        {
            name: 'underlying',
            baseName: 'underlying',
            type: 'string',
        },
        {
            name: 'cycle',
            baseName: 'cycle',
            type: 'DeliveryContract.Cycle',
        },
        {
            name: 'type',
            baseName: 'type',
            type: 'DeliveryContract.Type',
        },
        {
            name: 'quantoMultiplier',
            baseName: 'quanto_multiplier',
            type: 'string',
        },
        {
            name: 'leverageMin',
            baseName: 'leverage_min',
            type: 'string',
        },
        {
            name: 'leverageMax',
            baseName: 'leverage_max',
            type: 'string',
        },
        {
            name: 'maintenanceRate',
            baseName: 'maintenance_rate',
            type: 'string',
        },
        {
            name: 'markType',
            baseName: 'mark_type',
            type: 'DeliveryContract.MarkType',
        },
        {
            name: 'markPrice',
            baseName: 'mark_price',
            type: 'string',
        },
        {
            name: 'indexPrice',
            baseName: 'index_price',
            type: 'string',
        },
        {
            name: 'lastPrice',
            baseName: 'last_price',
            type: 'string',
        },
        {
            name: 'makerFeeRate',
            baseName: 'maker_fee_rate',
            type: 'string',
        },
        {
            name: 'takerFeeRate',
            baseName: 'taker_fee_rate',
            type: 'string',
        },
        {
            name: 'orderPriceRound',
            baseName: 'order_price_round',
            type: 'string',
        },
        {
            name: 'markPriceRound',
            baseName: 'mark_price_round',
            type: 'string',
        },
        {
            name: 'basisRate',
            baseName: 'basis_rate',
            type: 'string',
        },
        {
            name: 'basisValue',
            baseName: 'basis_value',
            type: 'string',
        },
        {
            name: 'basisImpactValue',
            baseName: 'basis_impact_value',
            type: 'string',
        },
        {
            name: 'settlePrice',
            baseName: 'settle_price',
            type: 'string',
        },
        {
            name: 'settlePriceInterval',
            baseName: 'settle_price_interval',
            type: 'number',
        },
        {
            name: 'settlePriceDuration',
            baseName: 'settle_price_duration',
            type: 'number',
        },
        {
            name: 'expireTime',
            baseName: 'expire_time',
            type: 'number',
        },
        {
            name: 'riskLimitBase',
            baseName: 'risk_limit_base',
            type: 'string',
        },
        {
            name: 'riskLimitStep',
            baseName: 'risk_limit_step',
            type: 'string',
        },
        {
            name: 'riskLimitMax',
            baseName: 'risk_limit_max',
            type: 'string',
        },
        {
            name: 'orderSizeMin',
            baseName: 'order_size_min',
            type: 'number',
        },
        {
            name: 'orderSizeMax',
            baseName: 'order_size_max',
            type: 'number',
        },
        {
            name: 'orderPriceDeviate',
            baseName: 'order_price_deviate',
            type: 'string',
        },
        {
            name: 'refDiscountRate',
            baseName: 'ref_discount_rate',
            type: 'string',
        },
        {
            name: 'refRebateRate',
            baseName: 'ref_rebate_rate',
            type: 'string',
        },
        {
            name: 'orderbookId',
            baseName: 'orderbook_id',
            type: 'number',
        },
        {
            name: 'tradeId',
            baseName: 'trade_id',
            type: 'number',
        },
        {
            name: 'tradeSize',
            baseName: 'trade_size',
            type: 'number',
        },
        {
            name: 'positionSize',
            baseName: 'position_size',
            type: 'number',
        },
        {
            name: 'configChangeTime',
            baseName: 'config_change_time',
            type: 'number',
        },
        {
            name: 'inDelisting',
            baseName: 'in_delisting',
            type: 'boolean',
        },
        {
            name: 'ordersLimit',
            baseName: 'orders_limit',
            type: 'number',
        },
    ];

    static getAttributeTypeMap() {
        return DeliveryContract.attributeTypeMap;
    }
}

export namespace DeliveryContract {
    export enum Cycle {
        WEEKLY = <any>'WEEKLY',
        BIWEEKLY = <any>'BI-WEEKLY',
        QUARTERLY = <any>'QUARTERLY',
        BIQUARTERLY = <any>'BI-QUARTERLY',
    }
    export enum Type {
        Inverse = <any>'inverse',
        Direct = <any>'direct',
    }
    export enum MarkType {
        Internal = <any>'internal',
        Index = <any>'index',
    }
}
