/**
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Futures contract details.
 */
export class Contract {
    /**
     * Futures contract.
     */
    'name'?: string;
    /**
     * Futures contract type.
     */
    'type'?: Contract.Type;
    /**
     * Multiplier used in converting from invoicing to settlement currency.
     */
    'quantoMultiplier'?: string;
    /**
     * Minimum leverage.
     */
    'leverageMin'?: string;
    /**
     * Maximum leverage.
     */
    'leverageMax'?: string;
    /**
     * Maintenance rate of margin.
     */
    'maintenanceRate'?: string;
    /**
     * Mark price type, internal - based on internal trading, external index price
     */
    'markType'?: Contract.MarkType;
    /**
     * Current mark price.
     */
    'markPrice'?: string;
    /**
     * Current index price.
     */
    'indexPrice'?: string;
    /**
     * Last trading price.
     */
    'lastPrice'?: string;
    /**
     * Maker fee rate, where negative means rebate.
     */
    'makerFeeRate'?: string;
    /**
     * Taker fee rate.
     */
    'takerFeeRate'?: string;
    /**
     * Minimum order price increment.
     */
    'orderPriceRound'?: string;
    /**
     * Minimum mark price increment.
     */
    'markPriceRound'?: string;
    /**
     * Current funding rate.
     */
    'fundingRate'?: string;
    /**
     * Funding application interval, unit in seconds.
     */
    'fundingInterval'?: number;
    /**
     * Next funding time.
     */
    'fundingNextApply'?: number;
    /**
     * Risk limit base,deprecated.
     */
    'riskLimitBase'?: string;
    /**
     * Step of adjusting risk limit,deprecated.
     */
    'riskLimitStep'?: string;
    /**
     * Maximum risk limit the contract allowed,deprecated,It is recommended to use /futures/{settle}/risk_limit_tiers to query risk limits.
     */
    'riskLimitMax'?: string;
    /**
     * Minimum order size the contract allowed.
     */
    'orderSizeMin'?: number;
    /**
     * Maximum order size the contract allowed.
     */
    'orderSizeMax'?: number;
    /**
     * deviation between order price and current index price. If price of an order is denoted as order_price, it must meet the following condition:   abs(order_price - mark_price) <= mark_price * order_price_deviate
     */
    'orderPriceDeviate'?: string;
    /**
     * Referral fee rate discount.
     */
    'refDiscountRate'?: string;
    /**
     * Referrer commission rate.
     */
    'refRebateRate'?: string;
    /**
     * Current orderbook ID.
     */
    'orderbookId'?: number;
    /**
     * Current trade ID.
     */
    'tradeId'?: number;
    /**
     * Historical accumulated trade size.
     */
    'tradeSize'?: number;
    /**
     * Current total long position size.
     */
    'positionSize'?: number;
    /**
     * Last changed time of configuration.
     */
    'configChangeTime'?: number;
    /**
     * `in_delisting=true` And when position_size>0, it means the contract is in the offline transition period `in_delisting=true` contract is offline
     */
    'inDelisting'?: boolean;
    /**
     * Maximum number of open orders.
     */
    'ordersLimit'?: number;
    /**
     * Whether bouns is enabled.
     */
    'enableBonus'?: boolean;
    /**
     * Whether portfolio margin account is enabled.
     */
    'enableCredit'?: boolean;
    /**
     * Created time of the contract.
     */
    'createTime'?: number;
    /**
     * The factor for the maximum of the funding rate. Maximum of funding rate = (1/market maximum leverage - maintenance margin rate) * funding_cap_ratio
     */
    'fundingCapRatio'?: string;
    /**
     * Contract Status Types include: prelaunch, trading, delisting, delisted.
     */
    'status'?: string;
    /**
     * Contract expiry timestamp.
     */
    'launchTime'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'name',
            baseName: 'name',
            type: 'string',
        },
        {
            name: 'type',
            baseName: 'type',
            type: 'Contract.Type',
        },
        {
            name: 'quantoMultiplier',
            baseName: 'quanto_multiplier',
            type: 'string',
        },
        {
            name: 'leverageMin',
            baseName: 'leverage_min',
            type: 'string',
        },
        {
            name: 'leverageMax',
            baseName: 'leverage_max',
            type: 'string',
        },
        {
            name: 'maintenanceRate',
            baseName: 'maintenance_rate',
            type: 'string',
        },
        {
            name: 'markType',
            baseName: 'mark_type',
            type: 'Contract.MarkType',
        },
        {
            name: 'markPrice',
            baseName: 'mark_price',
            type: 'string',
        },
        {
            name: 'indexPrice',
            baseName: 'index_price',
            type: 'string',
        },
        {
            name: 'lastPrice',
            baseName: 'last_price',
            type: 'string',
        },
        {
            name: 'makerFeeRate',
            baseName: 'maker_fee_rate',
            type: 'string',
        },
        {
            name: 'takerFeeRate',
            baseName: 'taker_fee_rate',
            type: 'string',
        },
        {
            name: 'orderPriceRound',
            baseName: 'order_price_round',
            type: 'string',
        },
        {
            name: 'markPriceRound',
            baseName: 'mark_price_round',
            type: 'string',
        },
        {
            name: 'fundingRate',
            baseName: 'funding_rate',
            type: 'string',
        },
        {
            name: 'fundingInterval',
            baseName: 'funding_interval',
            type: 'number',
        },
        {
            name: 'fundingNextApply',
            baseName: 'funding_next_apply',
            type: 'number',
        },
        {
            name: 'riskLimitBase',
            baseName: 'risk_limit_base',
            type: 'string',
        },
        {
            name: 'riskLimitStep',
            baseName: 'risk_limit_step',
            type: 'string',
        },
        {
            name: 'riskLimitMax',
            baseName: 'risk_limit_max',
            type: 'string',
        },
        {
            name: 'orderSizeMin',
            baseName: 'order_size_min',
            type: 'number',
        },
        {
            name: 'orderSizeMax',
            baseName: 'order_size_max',
            type: 'number',
        },
        {
            name: 'orderPriceDeviate',
            baseName: 'order_price_deviate',
            type: 'string',
        },
        {
            name: 'refDiscountRate',
            baseName: 'ref_discount_rate',
            type: 'string',
        },
        {
            name: 'refRebateRate',
            baseName: 'ref_rebate_rate',
            type: 'string',
        },
        {
            name: 'orderbookId',
            baseName: 'orderbook_id',
            type: 'number',
        },
        {
            name: 'tradeId',
            baseName: 'trade_id',
            type: 'number',
        },
        {
            name: 'tradeSize',
            baseName: 'trade_size',
            type: 'number',
        },
        {
            name: 'positionSize',
            baseName: 'position_size',
            type: 'number',
        },
        {
            name: 'configChangeTime',
            baseName: 'config_change_time',
            type: 'number',
        },
        {
            name: 'inDelisting',
            baseName: 'in_delisting',
            type: 'boolean',
        },
        {
            name: 'ordersLimit',
            baseName: 'orders_limit',
            type: 'number',
        },
        {
            name: 'enableBonus',
            baseName: 'enable_bonus',
            type: 'boolean',
        },
        {
            name: 'enableCredit',
            baseName: 'enable_credit',
            type: 'boolean',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'number',
        },
        {
            name: 'fundingCapRatio',
            baseName: 'funding_cap_ratio',
            type: 'string',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'string',
        },
        {
            name: 'launchTime',
            baseName: 'launch_time',
            type: 'number',
        },
    ];

    static getAttributeTypeMap() {
        return Contract.attributeTypeMap;
    }
}

export namespace Contract {
    export enum Type {
        Inverse = <any>'inverse',
        Direct = <any>'direct',
    }
    export enum MarkType {
        Internal = <any>'internal',
        Index = <any>'index',
    }
}
