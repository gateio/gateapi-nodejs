/**
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { FuturesInitialOrder } from './futuresInitialOrder';
import { FuturesPriceTrigger } from './futuresPriceTrigger';

/**
 * Futures price-triggered order details
 */
export class FuturesPriceTriggeredOrder {
    'initial': FuturesInitialOrder;
    'trigger': FuturesPriceTrigger;
    /**
     * Auto order ID
     */
    'id'?: number;
    /**
     * User ID
     */
    'user'?: number;
    /**
     * Created time
     */
    'createTime'?: number;
    /**
     * End time
     */
    'finishTime'?: number;
    /**
     * ID of the order created after trigger
     */
    'tradeId'?: number;
    /**
     * Order status  - `open`: Active - `finished`: Finished - `inactive`: Inactive, only applies to order take-profit/stop-loss - `invalid`: Invalid, only applies to order take-profit/stop-loss
     */
    'status'?: FuturesPriceTriggeredOrder.Status;
    /**
     * Finish status: cancelled - Cancelled; succeeded - Succeeded; failed - Failed; expired - Expired
     */
    'finishAs'?: FuturesPriceTriggeredOrder.FinishAs;
    /**
     * Additional description of how the order was completed
     */
    'reason'?: string;
    /**
     * Types of take-profit and stop-loss orders, including:  - `close-long-order`: Order take-profit/stop-loss, close long position - `close-short-order`: Order take-profit/stop-loss, close short position - `close-long-position`: Position take-profit/stop-loss, used to close all long positions - `close-short-position`: Position take-profit/stop-loss, used to close all short positions - `plan-close-long-position`: Position plan take-profit/stop-loss, used to close all or partial long positions - `plan-close-short-position`: Position plan take-profit/stop-loss, used to close all or partial short positions  The two types of order take-profit/stop-loss are read-only and cannot be passed in requests
     */
    'orderType'?: string;
    /**
     * Corresponding order ID for order take-profit/stop-loss orders
     */
    'meOrderId'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'initial',
            baseName: 'initial',
            type: 'FuturesInitialOrder',
        },
        {
            name: 'trigger',
            baseName: 'trigger',
            type: 'FuturesPriceTrigger',
        },
        {
            name: 'id',
            baseName: 'id',
            type: 'number',
        },
        {
            name: 'user',
            baseName: 'user',
            type: 'number',
        },
        {
            name: 'createTime',
            baseName: 'create_time',
            type: 'number',
        },
        {
            name: 'finishTime',
            baseName: 'finish_time',
            type: 'number',
        },
        {
            name: 'tradeId',
            baseName: 'trade_id',
            type: 'number',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'FuturesPriceTriggeredOrder.Status',
        },
        {
            name: 'finishAs',
            baseName: 'finish_as',
            type: 'FuturesPriceTriggeredOrder.FinishAs',
        },
        {
            name: 'reason',
            baseName: 'reason',
            type: 'string',
        },
        {
            name: 'orderType',
            baseName: 'order_type',
            type: 'string',
        },
        {
            name: 'meOrderId',
            baseName: 'me_order_id',
            type: 'number',
        },
    ];

    static getAttributeTypeMap() {
        return FuturesPriceTriggeredOrder.attributeTypeMap;
    }
}

export namespace FuturesPriceTriggeredOrder {
    export enum Status {
        Open = <any>'open',
        Finished = <any>'finished',
        Inactive = <any>'inactive',
        Invalid = <any>'invalid',
    }
    export enum FinishAs {
        Cancelled = <any>'cancelled',
        Succeeded = <any>'succeeded',
        Failed = <any>'failed',
        Expired = <any>'expired',
    }
}
