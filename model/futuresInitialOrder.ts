/**
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export class FuturesInitialOrder {
    /**
     * Futures contract
     */
    'contract': string;
    /**
     * Represents the number of contracts that need to be closed, full closing: size=0 Partial closing: plan-close-short-position size>0  Partial closing: plan-close-long-position size<0
     */
    'size'?: number;
    /**
     * Order price. Set to 0 to use market price
     */
    'price': string;
    /**
     * When all positions are closed in a single position mode, it must be set to true to perform the closing operation When partially closed positions in single-store mode/double-store mode, you can not set close, or close=false
     */
    'close'?: boolean;
    /**
     * Time in force strategy, default is gtc, market order currently only supports ioc mode Market order currently only supports ioc mode  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled
     */
    'tif'?: FuturesInitialOrder.Tif;
    /**
     * The source of the order, including: - web: web - api: api - app: app
     */
    'text'?: string;
    /**
     * When set to true, perform automatic position reduction operation. Set to true to ensure that the order will not open a new position, and is only used to close or reduce positions
     */
    'reduceOnly'?: boolean;
    /**
     * Do not set auto_size When the dual-position mode is closed all positions (size=0), auto_size, close_long, close_short, short When the double-storey mode partially closes the position (size â‰  0), there is no need to set auto_size
     */
    'autoSize'?: string;
    /**
     * Is the order reduce-only
     */
    'isReduceOnly'?: boolean;
    /**
     * Is the order to close position
     */
    'isClose'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {
            name: 'contract',
            baseName: 'contract',
            type: 'string',
        },
        {
            name: 'size',
            baseName: 'size',
            type: 'number',
        },
        {
            name: 'price',
            baseName: 'price',
            type: 'string',
        },
        {
            name: 'close',
            baseName: 'close',
            type: 'boolean',
        },
        {
            name: 'tif',
            baseName: 'tif',
            type: 'FuturesInitialOrder.Tif',
        },
        {
            name: 'text',
            baseName: 'text',
            type: 'string',
        },
        {
            name: 'reduceOnly',
            baseName: 'reduce_only',
            type: 'boolean',
        },
        {
            name: 'autoSize',
            baseName: 'auto_size',
            type: 'string',
        },
        {
            name: 'isReduceOnly',
            baseName: 'is_reduce_only',
            type: 'boolean',
        },
        {
            name: 'isClose',
            baseName: 'is_close',
            type: 'boolean',
        },
    ];

    static getAttributeTypeMap() {
        return FuturesInitialOrder.attributeTypeMap;
    }
}

export namespace FuturesInitialOrder {
    export enum Tif {
        Gtc = <any>'gtc',
        Ioc = <any>'ioc',
    }
}
