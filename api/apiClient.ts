/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* eslint-disable @typescript-eslint/no-floating-promises */

import { Authentication, GateApiV4Auth, HttpBasicAuth, HttpBearerAuth, OAuth, ObjectSerializer } from '../model/models';
import globalAxios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class ApiClient {
    protected _basePath = 'https://api.gateio.ws/api/v4';
    protected _defaultHeaders: any = {};

    protected authentications: { [key: string]: Authentication } = {
        apiv4: new GateApiV4Auth(),
    };

    constructor(basePath?: string, protected axiosInstance: AxiosInstance = globalAxios) {
        this._basePath = basePath || this._basePath;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    public setApiKeySecret(key: string, secret: string) {
        const auth = this.authentications['apiv4'] as GateApiV4Auth;
        auth.key = key;
        auth.secret = secret;
    }

    public applyToRequest(config: AxiosRequestConfig, authSettings: Array<string>): AxiosRequestConfig {
        for (const auth of authSettings) {
            const authenticator = this.authentications[auth];
            if (authenticator) {
                config = authenticator.applyToRequest(config);
            }
        }
        return config;
    }

    public async request<T>(
        config: AxiosRequestConfig,
        responseType: string,
        authSettings: Array<string>,
    ): Promise<{ response: AxiosResponse; body: T }> {
        return Promise.resolve(config)
            .then((c) => this.applyToRequest(c, authSettings))
            .then((c) => {
                return this.axiosInstance.request(c).then((rsp) => {
                    let body = rsp.data;
                    if (responseType.length > 0) {
                        body = ObjectSerializer.deserialize(rsp.data, responseType);
                    }
                    return { response: rsp, body: body };
                });
            });
    }
}
