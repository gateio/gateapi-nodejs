/**
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { CollateralAlign } from '../model/collateralAlign';
import { CollateralLoanCurrency } from '../model/collateralLoanCurrency';
import { CollateralOrder } from '../model/collateralOrder';
import { CollateralRecord } from '../model/collateralRecord';
import { CreateCollateralOrder } from '../model/createCollateralOrder';
import { OrderResp } from '../model/orderResp';
import { RepayLoan } from '../model/repayLoan';
import { RepayRecord } from '../model/repayRecord';
import { RepayResp } from '../model/repayResp';
import { UserLtvInfo } from '../model/userLtvInfo';
import { UserTotalAmount } from '../model/userTotalAmount';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class CollateralLoanApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     *
     * @summary List Orders
     * @param opts Optional parameters
     * @param opts.page Page number
     * @param opts.limit Maximum number of records to be returned in a single list
     * @param opts.collateralCurrency Collateral
     * @param opts.borrowCurrency Borrowed currency
     */
    public async listCollateralLoanOrders(opts: {
        page?: number;
        limit?: number;
        collateralCurrency?: string;
        borrowCurrency?: string;
    }): Promise<{ response: AxiosResponse; body: Array<CollateralOrder> }> {
        const localVarPath = this.client.basePath + '/loan/collateral/orders';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = ObjectSerializer.serialize(
                opts.collateralCurrency,
                'string',
            );
        }

        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<CollateralOrder>>(config, 'Array<CollateralOrder>', authSettings);
    }

    /**
     *
     * @summary Place order
     * @param createCollateralOrder
     */
    public async createCollateralLoan(
        createCollateralOrder: CreateCollateralOrder,
    ): Promise<{ response: AxiosResponse; body: OrderResp }> {
        const localVarPath = this.client.basePath + '/loan/collateral/orders';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'createCollateralOrder' is not null or undefined
        if (createCollateralOrder === null || createCollateralOrder === undefined) {
            throw new Error(
                'Required parameter createCollateralOrder was null or undefined when calling createCollateralLoan.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(createCollateralOrder, 'CreateCollateralOrder'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<OrderResp>(config, 'OrderResp', authSettings);
    }

    /**
     *
     * @summary Get a single order
     * @param orderId Order ID returned on successful order creation
     */
    public async getCollateralLoanOrderDetail(
        orderId: number,
    ): Promise<{ response: AxiosResponse; body: CollateralOrder }> {
        const localVarPath =
            this.client.basePath +
            '/loan/collateral/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error(
                'Required parameter orderId was null or undefined when calling getCollateralLoanOrderDetail.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<CollateralOrder>(config, 'CollateralOrder', authSettings);
    }

    /**
     *
     * @summary Repayment
     * @param repayLoan
     */
    public async repayCollateralLoan(repayLoan: RepayLoan): Promise<{ response: AxiosResponse; body: RepayResp }> {
        const localVarPath = this.client.basePath + '/loan/collateral/repay';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'repayLoan' is not null or undefined
        if (repayLoan === null || repayLoan === undefined) {
            throw new Error('Required parameter repayLoan was null or undefined when calling repayCollateralLoan.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(repayLoan, 'RepayLoan'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<RepayResp>(config, 'RepayResp', authSettings);
    }

    /**
     *
     * @summary Repayment history
     * @param source Operation type: repay - Regular repayment, liquidate - Liquidation
     * @param opts Optional parameters
     * @param opts.borrowCurrency Borrowed currency
     * @param opts.collateralCurrency Collateral
     * @param opts.page Page number
     * @param opts.limit Maximum number of records to be returned in a single list
     * @param opts.from Start timestamp of the query
     * @param opts.to Time range ending, default to current time
     */
    public async listRepayRecords(
        source: string,
        opts: {
            borrowCurrency?: string;
            collateralCurrency?: string;
            page?: number;
            limit?: number;
            from?: number;
            to?: number;
        },
    ): Promise<{ response: AxiosResponse; body: Array<RepayRecord> }> {
        const localVarPath = this.client.basePath + '/loan/collateral/repay_records';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'source' is not null or undefined
        if (source === null || source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling listRepayRecords.');
        }

        opts = opts || {};
        localVarQueryParameters['source'] = ObjectSerializer.serialize(source, 'string');

        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }

        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = ObjectSerializer.serialize(
                opts.collateralCurrency,
                'string',
            );
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(opts.from, 'number');
        }

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<RepayRecord>>(config, 'Array<RepayRecord>', authSettings);
    }

    /**
     *
     * @summary Query collateral adjustment records
     * @param opts Optional parameters
     * @param opts.page Page number
     * @param opts.limit Maximum number of records to be returned in a single list
     * @param opts.from Start timestamp of the query
     * @param opts.to Time range ending, default to current time
     * @param opts.borrowCurrency Borrowed currency
     * @param opts.collateralCurrency Collateral
     */
    public async listCollateralRecords(opts: {
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
        borrowCurrency?: string;
        collateralCurrency?: string;
    }): Promise<{ response: AxiosResponse; body: Array<CollateralRecord> }> {
        const localVarPath = this.client.basePath + '/loan/collateral/collaterals';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(opts.from, 'number');
        }

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, 'number');
        }

        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }

        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = ObjectSerializer.serialize(
                opts.collateralCurrency,
                'string',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<CollateralRecord>>(config, 'Array<CollateralRecord>', authSettings);
    }

    /**
     *
     * @summary Increase or redeem collateral
     * @param collateralAlign
     */
    public async operateCollateral(collateralAlign: CollateralAlign): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/loan/collateral/collaterals';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'collateralAlign' is not null or undefined
        if (collateralAlign === null || collateralAlign === undefined) {
            throw new Error('Required parameter collateralAlign was null or undefined when calling operateCollateral.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(collateralAlign, 'CollateralAlign'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Query the total borrowing and collateral amount for the user
     */
    public async getUserTotalAmount(): Promise<{ response: AxiosResponse; body: UserTotalAmount }> {
        const localVarPath = this.client.basePath + '/loan/collateral/total_amount';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UserTotalAmount>(config, 'UserTotalAmount', authSettings);
    }

    /**
     *
     * @summary Query user\'s collateralization ratio
     * @param collateralCurrency Collateral
     * @param borrowCurrency Borrowed currency
     */
    public async getUserLtvInfo(
        collateralCurrency: string,
        borrowCurrency: string,
    ): Promise<{ response: AxiosResponse; body: UserLtvInfo }> {
        const localVarPath = this.client.basePath + '/loan/collateral/ltv';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'collateralCurrency' is not null or undefined
        if (collateralCurrency === null || collateralCurrency === undefined) {
            throw new Error('Required parameter collateralCurrency was null or undefined when calling getUserLtvInfo.');
        }

        // verify required parameter 'borrowCurrency' is not null or undefined
        if (borrowCurrency === null || borrowCurrency === undefined) {
            throw new Error('Required parameter borrowCurrency was null or undefined when calling getUserLtvInfo.');
        }

        localVarQueryParameters['collateral_currency'] = ObjectSerializer.serialize(collateralCurrency, 'string');

        localVarQueryParameters['borrow_currency'] = ObjectSerializer.serialize(borrowCurrency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UserLtvInfo>(config, 'UserLtvInfo', authSettings);
    }

    /**
     *
     * @summary Query supported borrowing and collateral currencies
     * @param opts Optional parameters
     * @param opts.loanCurrency The parameter loan_currency is used to specify the borrowing currency. If loan_currency is not provided, the API will return all supported borrowing currencies.
     */
    public async listCollateralCurrencies(opts: {
        loanCurrency?: string;
    }): Promise<{ response: AxiosResponse; body: Array<CollateralLoanCurrency> }> {
        const localVarPath = this.client.basePath + '/loan/collateral/currencies';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.loanCurrency !== undefined) {
            localVarQueryParameters['loan_currency'] = ObjectSerializer.serialize(opts.loanCurrency, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<CollateralLoanCurrency>>(
            config,
            'Array<CollateralLoanCurrency>',
            authSettings,
        );
    }
}
