/**
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { AccountDetail } from '../model/accountDetail';
import { AccountRateLimit } from '../model/accountRateLimit';
import { DebitFee } from '../model/debitFee';
import { StpGroup } from '../model/stpGroup';
import { StpGroupUser } from '../model/stpGroupUser';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class AccountApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     *
     * @summary Retrieve user account information
     */
    public async getAccountDetail(): Promise<{ response: AxiosResponse; body: AccountDetail }> {
        const localVarPath = this.client.basePath + '/account/detail';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<AccountDetail>(config, 'AccountDetail', authSettings);
    }

    /**
     *
     * @summary Get user transaction rate limit information
     */
    public async getAccountRateLimit(): Promise<{ response: AxiosResponse; body: Array<AccountRateLimit> }> {
        const localVarPath = this.client.basePath + '/account/rate_limit';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<AccountRateLimit>>(config, 'Array<AccountRateLimit>', authSettings);
    }

    /**
     * Only query STP user groups created by the current main account
     * @summary Query STP user groups created by the user
     * @param opts Optional parameters
     * @param opts.name Fuzzy search by name
     */
    public async listSTPGroups(opts: { name?: string }): Promise<{ response: AxiosResponse; body: Array<StpGroup> }> {
        const localVarPath = this.client.basePath + '/account/stp_groups';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(opts.name, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<StpGroup>>(config, 'Array<StpGroup>', authSettings);
    }

    /**
     * Only the main account is allowed to create a new STP user group
     * @summary Create STP user group
     * @param stpGroup
     */
    public async createSTPGroup(stpGroup: StpGroup): Promise<{ response: AxiosResponse; body: StpGroup }> {
        const localVarPath = this.client.basePath + '/account/stp_groups';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'stpGroup' is not null or undefined
        if (stpGroup === null || stpGroup === undefined) {
            throw new Error('Required parameter stpGroup was null or undefined when calling createSTPGroup.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(stpGroup, 'StpGroup'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<StpGroup>(config, 'StpGroup', authSettings);
    }

    /**
     * Only the main account that created this STP group can query the account ID list in the current STP group
     * @summary Query users in the STP user group
     * @param stpId STP Group ID
     */
    public async listSTPGroupsUsers(stpId: number): Promise<{ response: AxiosResponse; body: Array<StpGroupUser> }> {
        const localVarPath =
            this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'stpId' is not null or undefined
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling listSTPGroupsUsers.');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<StpGroupUser>>(config, 'Array<StpGroupUser>', authSettings);
    }

    /**
     * - Only the main account that created this STP group can add users to the STP user group - Only accounts under the current main account are allowed, cross-main account is not permitted
     * @summary Add users to the STP user group
     * @param stpId STP Group ID
     * @param requestBody User ID
     */
    public async addSTPGroupUsers(
        stpId: number,
        requestBody: Array<number>,
    ): Promise<{ response: AxiosResponse; body: Array<StpGroupUser> }> {
        const localVarPath =
            this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'stpId' is not null or undefined
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling addSTPGroupUsers.');
        }

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling addSTPGroupUsers.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(requestBody, 'Array<number>'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<StpGroupUser>>(config, 'Array<StpGroupUser>', authSettings);
    }

    /**
     * - Only the main account that created this STP group is allowed to delete users from the STP user group - Deletion is limited to accounts under the current main account; cross-account deletion is not permitted
     * @summary Delete users from the STP user group
     * @param stpId STP Group ID
     * @param userId STP user IDs, multiple IDs can be separated by commas
     */
    public async deleteSTPGroupUsers(
        stpId: number,
        userId: number,
    ): Promise<{ response: AxiosResponse; body: Array<StpGroupUser> }> {
        const localVarPath =
            this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'stpId' is not null or undefined
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling deleteSTPGroupUsers.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteSTPGroupUsers.');
        }

        localVarQueryParameters['user_id'] = ObjectSerializer.serialize(userId, 'number');

        const config: AxiosRequestConfig = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<StpGroupUser>>(config, 'Array<StpGroupUser>', authSettings);
    }

    /**
     * Query the GT fee deduction configuration for the current account
     * @summary Query GT fee deduction configuration
     */
    public async getDebitFee(): Promise<{ response: AxiosResponse; body: DebitFee }> {
        const localVarPath = this.client.basePath + '/account/debit_fee';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<DebitFee>(config, 'DebitFee', authSettings);
    }

    /**
     * Enable or disable GT fee deduction for the current account
     * @summary Configure GT fee deduction
     * @param debitFee
     */
    public async setDebitFee(debitFee: DebitFee): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/account/debit_fee';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'debitFee' is not null or undefined
        if (debitFee === null || debitFee === undefined) {
            throw new Error('Required parameter debitFee was null or undefined when calling setDebitFee.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(debitFee, 'DebitFee'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }
}
