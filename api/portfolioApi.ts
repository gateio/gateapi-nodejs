/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { PortfolioAccount } from '../model/portfolioAccount';
import { PortfolioBorrowable } from '../model/portfolioBorrowable';
import { PortfolioLoan } from '../model/portfolioLoan';
import { PortfolioLoanRecord } from '../model/portfolioLoanRecord';
import { PortfolioMode } from '../model/portfolioMode';
import { PortfolioTransferable } from '../model/portfolioTransferable';
import { UniLoan } from '../model/uniLoan';
import { UniLoanInterestRecord } from '../model/uniLoanInterestRecord';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class PortfolioApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     * The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
     * @summary Get portfolio account information
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     */
    public async listPortfolioAccounts(opts: {
        currency?: string;
    }): Promise<{ response: AxiosResponse; body: PortfolioAccount }> {
        const localVarPath = this.client.basePath + '/portfolio/accounts';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<PortfolioAccount>(config, 'PortfolioAccount', authSettings);
    }

    /**
     * cross_margin - cross margin
     * @summary Retrieve the account\'s portfolio mode
     */
    public async listAccountPortfolioMode(): Promise<{ response: AxiosResponse; body: { [key: string]: boolean } }> {
        const localVarPath = this.client.basePath + '/portfolio/account_mode';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<{ [key: string]: boolean }>(config, '{ [key: string]: boolean; }', authSettings);
    }

    /**
     *
     * @summary Configure the account\'s portfolio mode.
     * @param portfolioMode
     */
    public async setAccountPortfolioMode(
        portfolioMode: PortfolioMode,
    ): Promise<{ response: AxiosResponse; body: { [key: string]: boolean } }> {
        const localVarPath = this.client.basePath + '/portfolio/account_mode';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'portfolioMode' is not null or undefined
        if (portfolioMode === null || portfolioMode === undefined) {
            throw new Error(
                'Required parameter portfolioMode was null or undefined when calling setAccountPortfolioMode.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(portfolioMode, 'PortfolioMode'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<{ [key: string]: boolean }>(config, '{ [key: string]: boolean; }', authSettings);
    }

    /**
     *
     * @summary Retrieve the maximum borrowable amount for the account.
     * @param currency Retrieve data of the specified currency
     */
    public async getPortfolioBorrowable(
        currency: string,
    ): Promise<{ response: AxiosResponse; body: PortfolioBorrowable }> {
        const localVarPath = this.client.basePath + '/portfolio/borrowable';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getPortfolioBorrowable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<PortfolioBorrowable>(config, 'PortfolioBorrowable', authSettings);
    }

    /**
     *
     * @summary Retrieve the maximum amount that can be transferred out from the account
     * @param currency Retrieve data of the specified currency
     */
    public async getPortfolioTransferable(
        currency: string,
    ): Promise<{ response: AxiosResponse; body: PortfolioTransferable }> {
        const localVarPath = this.client.basePath + '/portfolio/transferable';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getPortfolioTransferable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<PortfolioTransferable>(config, 'PortfolioTransferable', authSettings);
    }

    /**
     *
     * @summary List loans
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     */
    public async listPortfolioUniLoanInterestRecords(opts: {
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{ response: AxiosResponse; body: Array<UniLoan> }> {
        const localVarPath = this.client.basePath + '/portfolio/loans';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoan>>(config, 'Array<UniLoan>', authSettings);
    }

    /**
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user\'s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter `repaid_all=true`
     * @summary Borrow or repay
     * @param portfolioLoan
     */
    public async createPortfolioLoan(portfolioLoan: PortfolioLoan): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/portfolio/loans';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'portfolioLoan' is not null or undefined
        if (portfolioLoan === null || portfolioLoan === undefined) {
            throw new Error('Required parameter portfolioLoan was null or undefined when calling createPortfolioLoan.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(portfolioLoan, 'PortfolioLoan'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Get load records
     * @param opts Optional parameters
     * @param opts.type The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     */
    public async listPortfolioLoanRecords(opts: {
        type?: 'borrow' | 'repay';
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{ response: AxiosResponse; body: Array<PortfolioLoanRecord> }> {
        const localVarPath = this.client.basePath + '/portfolio/loan_records';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, "'borrow' | 'repay'");
        }

        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<PortfolioLoanRecord>>(config, 'Array<PortfolioLoanRecord>', authSettings);
    }

    /**
     *
     * @summary List interest records
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     */
    public async listPortfolioLoanInterestRecords(opts: {
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{ response: AxiosResponse; body: Array<UniLoanInterestRecord> }> {
        const localVarPath = this.client.basePath + '/portfolio/interest_records';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoanInterestRecord>>(config, 'Array<UniLoanInterestRecord>', authSettings);
    }
}
