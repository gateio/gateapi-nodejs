/**
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { AccountBookResponse } from '../model/accountBookResponse';
import { AccountsResponse } from '../model/accountsResponse';
import { Currency2 } from '../model/currency2';
import { OrderResponse } from '../model/orderResponse';
import { PlaceOrderRequest } from '../model/placeOrderRequest';
import { PlaceOrderResponse } from '../model/placeOrderResponse';
import { QuoteRequest } from '../model/quoteRequest';
import { QuoteResponse } from '../model/quoteResponse';
import { Ticker2 } from '../model/ticker2';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class AlphaApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     * Query Position Assets
     * @summary API for Alpha Accounts
     */
    public async listAlphaAccounts(): Promise<{ response: AxiosResponse; body: Array<AccountsResponse> }> {
        const localVarPath = this.client.basePath + '/alpha/accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<AccountsResponse>>(config, 'Array<AccountsResponse>', authSettings);
    }

    /**
     * Query Asset Transactions
     * @summary Alpha Asset Transaction API
     * @param from Start timestamp of the query
     * @param opts Optional parameters
     * @param opts.to Time range ending, default to current time
     * @param opts.page Page number
     * @param opts.limit The maximum number of items per page is 100
     */
    public async listAlphaAccountBook(
        from: number,
        opts: { to?: number; page?: number; limit?: number },
    ): Promise<{ response: AxiosResponse; body: Array<AccountBookResponse> }> {
        const localVarPath = this.client.basePath + '/alpha/account_book';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'from' is not null or undefined
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling listAlphaAccountBook.');
        }

        opts = opts || {};
        localVarQueryParameters['from'] = ObjectSerializer.serialize(from, 'number');

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, 'number');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<AccountBookResponse>>(config, 'Array<AccountBookResponse>', authSettings);
    }

    /**
     * The quote_id returned by the quotation API is valid for one minute.You must place the order within this time window;otherwise, the quote will expire and a new quotation request is required
     * @summary Alpha Quotation API
     * @param quoteRequest
     */
    public async quoteAlphaOrder(
        quoteRequest: QuoteRequest,
    ): Promise<{ response: AxiosResponse; body: QuoteResponse }> {
        const localVarPath = this.client.basePath + '/alpha/quote';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'quoteRequest' is not null or undefined
        if (quoteRequest === null || quoteRequest === undefined) {
            throw new Error('Required parameter quoteRequest was null or undefined when calling quoteAlphaOrder.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(quoteRequest, 'QuoteRequest'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<QuoteResponse>(config, 'QuoteResponse', authSettings);
    }

    /**
     *
     * @summary Alpha 查询订单列表接口
     * @param currency Trading Symbol
     * @param side 买单或者卖单 - buy - sell
     * @param status Order Status - &#x60;0&#x60; : All - &#x60;1&#x60; : Processing - &#x60;2&#x60; : Successful - &#x60;3&#x60; : Failed - &#x60;4&#x60; : Canceled - &#x60;5&#x60; : Buy order placed but transfer not completed - &#x60;6&#x60; : Cancelled order with transfer not complete
     * @param opts Optional parameters
     * @param opts.from 查询订单的起始时间
     * @param opts.to 查询订单的结束时间，不指定则默认为当前时间
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     * @param opts.page Page number
     */
    public async listAlphaOrder(
        currency: string,
        side: string,
        status: number,
        opts: { from?: number; to?: number; limit?: number; page?: number },
    ): Promise<{ response: AxiosResponse; body: Array<OrderResponse> }> {
        const localVarPath = this.client.basePath + '/alpha/orders';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling listAlphaOrder.');
        }

        // verify required parameter 'side' is not null or undefined
        if (side === null || side === undefined) {
            throw new Error('Required parameter side was null or undefined when calling listAlphaOrder.');
        }

        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listAlphaOrder.');
        }

        opts = opts || {};
        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        localVarQueryParameters['side'] = ObjectSerializer.serialize(side, 'string');

        localVarQueryParameters['status'] = ObjectSerializer.serialize(status, 'number');

        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(opts.from, 'number');
        }

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<OrderResponse>>(config, 'Array<OrderResponse>', authSettings);
    }

    /**
     *
     * @summary Alpha Order Placement API
     * @param placeOrderRequest
     */
    public async placeAlphaOrder(
        placeOrderRequest: PlaceOrderRequest,
    ): Promise<{ response: AxiosResponse; body: PlaceOrderResponse }> {
        const localVarPath = this.client.basePath + '/alpha/orders';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'placeOrderRequest' is not null or undefined
        if (placeOrderRequest === null || placeOrderRequest === undefined) {
            throw new Error('Required parameter placeOrderRequest was null or undefined when calling placeAlphaOrder.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(placeOrderRequest, 'PlaceOrderRequest'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<PlaceOrderResponse>(config, 'PlaceOrderResponse', authSettings);
    }

    /**
     *
     * @summary Alpha 查询单个订单接口
     * @param orderId Order ID
     */
    public async getAlphaOrder(orderId: string): Promise<{ response: AxiosResponse; body: OrderResponse }> {
        const localVarPath = this.client.basePath + '/alpha/order';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getAlphaOrder.');
        }

        localVarQueryParameters['order_id'] = ObjectSerializer.serialize(orderId, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<OrderResponse>(config, 'OrderResponse', authSettings);
    }

    /**
     * When the currency parameter is provided, query and return information for the specified currency. When the currency parameter is not provided, return a paginated list of currencies.
     * @summary 查询币种信息
     * @param opts Optional parameters
     * @param opts.currency 根据币种符号查询币种信息
     * @param opts.limit Maximum number of records to be returned in a single list
     * @param opts.page Page number
     */
    public async listAlphaCurrencies(opts: {
        currency?: string;
        limit?: number;
        page?: number;
    }): Promise<{ response: AxiosResponse; body: Array<Currency2> }> {
        const localVarPath = this.client.basePath + '/alpha/currencies';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<Currency2>>(config, 'Array<Currency2>', authSettings);
    }

    /**
     * When the currency parameter is provided, query and return information for the specified ticker, When the currency parameter is not provided, return a paginated list of tickers.
     * @summary 查询币种ticker
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.limit Maximum number of records to be returned in a single list
     * @param opts.page Page number
     */
    public async listAlphaTickers(opts: {
        currency?: string;
        limit?: number;
        page?: number;
    }): Promise<{ response: AxiosResponse; body: Array<Ticker2> }> {
        const localVarPath = this.client.basePath + '/alpha/tickers';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<Ticker2>>(config, 'Array<Ticker2>', authSettings);
    }
}
