/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/* tslint:disable:no-unused-locals */
import { UniLoan } from '../model/uniLoan';
import { UniLoanInterestRecord } from '../model/uniLoanInterestRecord';
import { UnifiedAccount } from '../model/unifiedAccount';
import { UnifiedBorrowable } from '../model/unifiedBorrowable';
import { UnifiedDiscount } from '../model/unifiedDiscount';
import { UnifiedHistoryLoanRate } from '../model/unifiedHistoryLoanRate';
import { UnifiedLeverageConfig } from '../model/unifiedLeverageConfig';
import { UnifiedLeverageSetting } from '../model/unifiedLeverageSetting';
import { UnifiedLoan } from '../model/unifiedLoan';
import { UnifiedLoanRecord } from '../model/unifiedLoanRecord';
import { UnifiedMarginTiers } from '../model/unifiedMarginTiers';
import { UnifiedModeSet } from '../model/unifiedModeSet';
import { UnifiedPortfolioInput } from '../model/unifiedPortfolioInput';
import { UnifiedPortfolioOutput } from '../model/unifiedPortfolioOutput';
import { UnifiedRiskUnits } from '../model/unifiedRiskUnits';
import { UnifiedTransferable } from '../model/unifiedTransferable';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class UnifiedApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     * The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  You can refer to the [Formula](#portfolio-account) in the documentation
     * @summary Get unified account information
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     */
    public async listUnifiedAccounts(opts: { currency?: string,  } ) : Promise<{ response: AxiosResponse; body: UnifiedAccount; }> {
        const localVarPath = this.client.basePath + '/unified/accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, "string");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedAccount>(config, "UnifiedAccount", authSettings);
    }

    /**
     * 
     * @summary Query about the maximum borrowing for the unified account
     * @param currency Retrieve data of the specified currency
     */
    public async getUnifiedBorrowable(currency: string) : Promise<{ response: AxiosResponse; body: UnifiedBorrowable; }> {
        const localVarPath = this.client.basePath + '/unified/borrowable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedBorrowable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedBorrowable>(config, "UnifiedBorrowable", authSettings);
    }

    /**
     * 
     * @summary Query about the maximum transferable for the unified account
     * @param currency Retrieve data of the specified currency
     */
    public async getUnifiedTransferable(currency: string) : Promise<{ response: AxiosResponse; body: UnifiedTransferable; }> {
        const localVarPath = this.client.basePath + '/unified/transferable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedTransferable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedTransferable>(config, "UnifiedTransferable", authSettings);
    }

    /**
     * 
     * @summary List loans
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     * @param opts.type Loan type, platform - platform, margin - margin
     */
    public async listUnifiedLoans(opts: { currency?: string, page?: number, limit?: number, type?: string,  } ) : Promise<{ response: AxiosResponse; body: Array<UniLoan>; }> {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, "string");
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, "number");
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, "number");
        }

        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, "string");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoan>>(config, "Array<UniLoan>", authSettings);
    }

    /**
     * When borrowing, it is essential to ensure that the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and the user.  The interest on the loan will be automatically deducted from the account at regular intervals. It is the user\'s responsibility to manage the repayment of the borrowed amount.  For repayment, the option to repay the entire borrowed amount is available by setting the parameter `repaid_all=true`
     * @summary Borrow or repay
     * @param unifiedLoan 
     */
    public async createUnifiedLoan(unifiedLoan: UnifiedLoan) : Promise<{ response: AxiosResponse; body?: any; }> {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'unifiedLoan' is not null or undefined
        if (unifiedLoan === null || unifiedLoan === undefined) {
            throw new Error('Required parameter unifiedLoan was null or undefined when calling createUnifiedLoan.');
        }


        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedLoan, "UnifiedLoan")
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, "", authSettings);
    }

    /**
     * 
     * @summary Get load records
     * @param opts Optional parameters
     * @param opts.type The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     */
    public async listUnifiedLoanRecords(opts: { type?: string, currency?: string, page?: number, limit?: number,  } ) : Promise<{ response: AxiosResponse; body: Array<UnifiedLoanRecord>; }> {
        const localVarPath = this.client.basePath + '/unified/loan_records';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, "string");
        }

        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, "string");
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, "number");
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, "number");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UnifiedLoanRecord>>(config, "Array<UnifiedLoanRecord>", authSettings);
    }

    /**
     * 
     * @summary List interest records
     * @param opts Optional parameters
     * @param opts.currency Retrieve data of the specified currency
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     * @param opts.from Start timestamp of the query
     * @param opts.to Time range ending, default to current time
     * @param opts.type Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin
     */
    public async listUnifiedLoanInterestRecords(opts: { currency?: string, page?: number, limit?: number, from?: number, to?: number, type?: string,  } ) : Promise<{ response: AxiosResponse; body: Array<UniLoanInterestRecord>; }> {
        const localVarPath = this.client.basePath + '/unified/interest_records';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, "string");
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, "number");
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, "number");
        }

        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(opts.from, "number");
        }

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, "number");
        }

        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, "string");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoanInterestRecord>>(config, "Array<UniLoanInterestRecord>", authSettings);
    }

    /**
     * Retrieve user risk unit details, only valid in portfolio margin mode
     * @summary Get user risk unit details
     */
    public async getUnifiedRiskUnits() : Promise<{ response: AxiosResponse; body: UnifiedRiskUnits; }> {
        const localVarPath = this.client.basePath + '/unified/risk_units';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedRiskUnits>(config, "UnifiedRiskUnits", authSettings);
    }

    /**
     * Unified account mode: - `classic`: Classic account mode - `multi_currency`: Cross-currency margin mode - `portfolio`: Portfolio margin mode - `single_currency`: Single-currency margin mode
     * @summary Query mode of the unified account
     */
    public async getUnifiedMode() : Promise<{ response: AxiosResponse; body: UnifiedModeSet; }> {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedModeSet>(config, "UnifiedModeSet", authSettings);
    }

    /**
     * Switching each account mode only requires passing the parameters of the corresponding account mode, and supports turning on or off the configuration switch in the corresponding account mode when switching the account mode  - When opening the classic account mode, mode=classic ```  PUT /unified/unified_mode  {  \"mode\": \"classic\"  } ``` - Open the cross-currency margin mode, mode=multi_currency ```  PUT /unified/unified_mode  {  \"mode\": \"multi_currency\",  \"settings\": {  \"usdt_futures\": true  }  } ``` - When the portfolio margin mode is enabled, mode=portfolio ```  PUT /unified/unified_mode  {  \"mode\": \"portfolio\",  \"settings\": {  \"spot_hedge\": true  }  } ``` - When opening a single currency margin mode, mode=single_currency ```  PUT /unified/unified_mode  {  \"mode\": \"single_currency\"  } ```
     * @summary Set mode of the unified account
     * @param unifiedModeSet 
     */
    public async setUnifiedMode(unifiedModeSet: UnifiedModeSet) : Promise<{ response: AxiosResponse; body?: any; }> {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'unifiedModeSet' is not null or undefined
        if (unifiedModeSet === null || unifiedModeSet === undefined) {
            throw new Error('Required parameter unifiedModeSet was null or undefined when calling setUnifiedMode.');
        }


        const config: AxiosRequestConfig = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedModeSet, "UnifiedModeSet")
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, "", authSettings);
    }

    /**
     * Due to fluctuations in lending depth, hourly interest rates may vary, and thus, I cannot provide exact rates. When a currency is not supported, the interest rate returned will be an empty string.
     * @summary Get unified estimate rate
     * @param currencies Specify the currency names for querying in an array, separated by commas, with a maximum of 10 currencies.
     */
    public async getUnifiedEstimateRate(currencies: Array<string>) : Promise<{ response: AxiosResponse; body: { [key: string]: string; }; }> {
        const localVarPath = this.client.basePath + '/unified/estimate_rate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currencies' is not null or undefined
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getUnifiedEstimateRate.');
        }

        localVarQueryParameters['currencies'] = ObjectSerializer.serialize(currencies, "Array<string>");


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<{ [key: string]: string; }>(config, "{ [key: string]: string; }", authSettings);
    }

    /**
     * 
     * @summary List currency discount tiers
     */
    public async listCurrencyDiscountTiers() : Promise<{ response: AxiosResponse; body: Array<UnifiedDiscount>; }> {
        const localVarPath = this.client.basePath + '/unified/currency_discount_tiers';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<UnifiedDiscount>>(config, "Array<UnifiedDiscount>", authSettings);
    }

    /**
     * 
     * @summary List loan margin tiers
     */
    public async listLoanMarginTiers() : Promise<{ response: AxiosResponse; body: Array<UnifiedMarginTiers>; }> {
        const localVarPath = this.client.basePath + '/unified/loan_margin_tiers';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<UnifiedMarginTiers>>(config, "Array<UnifiedMarginTiers>", authSettings);
    }

    /**
     * Portfolio Margin Calculator When inputting a simulated position portfolio, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity,  supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
     * @summary Portfolio margin calculator
     * @param unifiedPortfolioInput 
     */
    public async calculatePortfolioMargin(unifiedPortfolioInput: UnifiedPortfolioInput) : Promise<{ response: AxiosResponse; body: UnifiedPortfolioOutput; }> {
        const localVarPath = this.client.basePath + '/unified/portfolio_calculator';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'unifiedPortfolioInput' is not null or undefined
        if (unifiedPortfolioInput === null || unifiedPortfolioInput === undefined) {
            throw new Error('Required parameter unifiedPortfolioInput was null or undefined when calling calculatePortfolioMargin.');
        }


        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedPortfolioInput, "UnifiedPortfolioInput")
        };

        const authSettings = [];
        return this.client.request<UnifiedPortfolioOutput>(config, "UnifiedPortfolioOutput", authSettings);
    }

    /**
     * 
     * @summary Minimum currency leverage that can be set
     * @param currency Currency
     */
    public async getUserLeverageCurrencyConfig(currency: string) : Promise<{ response: AxiosResponse; body: UnifiedLeverageConfig; }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_config';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUserLeverageCurrencyConfig.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedLeverageConfig>(config, "UnifiedLeverageConfig", authSettings);
    }

    /**
     * Get the user\'s currency leverage. If currency is not passed, query all currencies.
     * @summary Get the leverage multiple of the user currency
     * @param opts Optional parameters
     * @param opts.currency Currency
     */
    public async getUserLeverageCurrencySetting(opts: { currency?: string,  } ) : Promise<{ response: AxiosResponse; body: UnifiedLeverageSetting; }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, "string");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedLeverageSetting>(config, "UnifiedLeverageSetting", authSettings);
    }

    /**
     * 
     * @summary Set the loan currency leverage
     * @param unifiedLeverageSetting 
     */
    public async setUserLeverageCurrencySetting(unifiedLeverageSetting: UnifiedLeverageSetting) : Promise<{ response: AxiosResponse; body?: any; }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'unifiedLeverageSetting' is not null or undefined
        if (unifiedLeverageSetting === null || unifiedLeverageSetting === undefined) {
            throw new Error('Required parameter unifiedLeverageSetting was null or undefined when calling setUserLeverageCurrencySetting.');
        }


        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedLeverageSetting, "UnifiedLeverageSetting")
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, "", authSettings);
    }

    /**
     * 
     * @summary get historical lending rates
     * @param currency Currency
     * @param opts Optional parameters
     * @param opts.tier The VIP level of the floating rate that needs to be queried
     * @param opts.page Page number
     * @param opts.limit Maximum response items.  Default: 100, minimum: 1, Maximum: 100
     */
    public async getHistoryLoanRate(currency: string, opts: { tier?: string, page?: number, limit?: number,  } ) : Promise<{ response: AxiosResponse; body: UnifiedHistoryLoanRate; }> {
        const localVarPath = this.client.basePath + '/unified/history_loan_rate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getHistoryLoanRate.');
        }

        opts = opts || {};
        if (opts.tier !== undefined) {
            localVarQueryParameters['tier'] = ObjectSerializer.serialize(opts.tier, "string");
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, "number");
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, "number");
        }


        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedHistoryLoanRate>(config, "UnifiedHistoryLoanRate", authSettings);
    }
}
