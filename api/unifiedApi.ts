/**
 * Gate API
 * Welcome to Gate API APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { TransferablesResult } from '../model/transferablesResult';
import { UniLoan } from '../model/uniLoan';
import { UniLoanInterestRecord } from '../model/uniLoanInterestRecord';
import { UnifiedAccount } from '../model/unifiedAccount';
import { UnifiedBorrowable } from '../model/unifiedBorrowable';
import { UnifiedBorrowable1 } from '../model/unifiedBorrowable1';
import { UnifiedCollateralReq } from '../model/unifiedCollateralReq';
import { UnifiedCollateralRes } from '../model/unifiedCollateralRes';
import { UnifiedCurrency } from '../model/unifiedCurrency';
import { UnifiedDiscount } from '../model/unifiedDiscount';
import { UnifiedHistoryLoanRate } from '../model/unifiedHistoryLoanRate';
import { UnifiedLeverageConfig } from '../model/unifiedLeverageConfig';
import { UnifiedLeverageSetting } from '../model/unifiedLeverageSetting';
import { UnifiedLoan } from '../model/unifiedLoan';
import { UnifiedLoanRecord } from '../model/unifiedLoanRecord';
import { UnifiedLoanResult } from '../model/unifiedLoanResult';
import { UnifiedMarginTiers } from '../model/unifiedMarginTiers';
import { UnifiedModeSet } from '../model/unifiedModeSet';
import { UnifiedPortfolioInput } from '../model/unifiedPortfolioInput';
import { UnifiedPortfolioOutput } from '../model/unifiedPortfolioOutput';
import { UnifiedRiskUnits } from '../model/unifiedRiskUnits';
import { UnifiedTransferable } from '../model/unifiedTransferable';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class UnifiedApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     * The assets of each currency in the account will be adjusted according to their liquidity, defined by corresponding adjustment coefficients, and then uniformly converted to USD to calculate the total asset value and position value of the account.  For specific formulas, please refer to [Margin Formula](#margin-formula)
     * @summary Get unified account information
     * @param opts Optional parameters
     * @param opts.currency Query by specified currency name
     * @param opts.subUid Sub account user ID
     */
    public async listUnifiedAccounts(opts: {
        currency?: string;
        subUid?: string;
    }): Promise<{ response: AxiosResponse; body: UnifiedAccount }> {
        const localVarPath = this.client.basePath + '/unified/accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.subUid !== undefined) {
            localVarQueryParameters['sub_uid'] = ObjectSerializer.serialize(opts.subUid, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedAccount>(config, 'UnifiedAccount', authSettings);
    }

    /**
     *
     * @summary Query maximum borrowable amount for unified account
     * @param currency Query by specified currency name
     */
    public async getUnifiedBorrowable(currency: string): Promise<{ response: AxiosResponse; body: UnifiedBorrowable }> {
        const localVarPath = this.client.basePath + '/unified/borrowable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedBorrowable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedBorrowable>(config, 'UnifiedBorrowable', authSettings);
    }

    /**
     *
     * @summary Query maximum transferable amount for unified account
     * @param currency Query by specified currency name
     */
    public async getUnifiedTransferable(
        currency: string,
    ): Promise<{ response: AxiosResponse; body: UnifiedTransferable }> {
        const localVarPath = this.client.basePath + '/unified/transferable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedTransferable.');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedTransferable>(config, 'UnifiedTransferable', authSettings);
    }

    /**
     *
     * @summary Batch query maximum transferable amount for unified accounts. Each currency shows the maximum value. After user withdrawal, the transferable amount for all currencies will change
     * @param currencies Specify the currency name to query in batches, and support up to 100 pass parameters at a time
     */
    public async getUnifiedTransferables(
        currencies: string,
    ): Promise<{ response: AxiosResponse; body: Array<TransferablesResult> }> {
        const localVarPath = this.client.basePath + '/unified/transferables';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currencies' is not null or undefined
        if (currencies === null || currencies === undefined) {
            throw new Error(
                'Required parameter currencies was null or undefined when calling getUnifiedTransferables.',
            );
        }

        localVarQueryParameters['currencies'] = ObjectSerializer.serialize(currencies, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<TransferablesResult>>(config, 'Array<TransferablesResult>', authSettings);
    }

    /**
     *
     * @summary Batch query unified account maximum borrowable amount
     * @param currencies Specify currency names for querying in an array, separated by commas, maximum 10 currencies
     */
    public async getUnifiedBorrowableList(
        currencies: Array<string>,
    ): Promise<{ response: AxiosResponse; body: Array<UnifiedBorrowable1> }> {
        const localVarPath = this.client.basePath + '/unified/batch_borrowable';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currencies' is not null or undefined
        if (currencies === null || currencies === undefined) {
            throw new Error(
                'Required parameter currencies was null or undefined when calling getUnifiedBorrowableList.',
            );
        }

        localVarQueryParameters['currencies'] = ObjectSerializer.serialize(currencies, 'Array<string>');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UnifiedBorrowable1>>(config, 'Array<UnifiedBorrowable1>', authSettings);
    }

    /**
     *
     * @summary Query loans
     * @param opts Optional parameters
     * @param opts.currency Query by specified currency name
     * @param opts.page Page number
     * @param opts.limit Maximum number of items returned. Default: 100, minimum: 1, maximum: 100
     * @param opts.type Loan type: platform borrowing - platform, margin borrowing - margin
     */
    public async listUnifiedLoans(opts: {
        currency?: string;
        page?: number;
        limit?: number;
        type?: string;
    }): Promise<{ response: AxiosResponse; body: Array<UniLoan> }> {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoan>>(config, 'Array<UniLoan>', authSettings);
    }

    /**
     * When borrowing, ensure the borrowed amount is not below the minimum borrowing threshold for the specific cryptocurrency and does not exceed the maximum borrowing limit set by the platform and user.  Loan interest will be automatically deducted from the account at regular intervals. Users are responsible for managing repayment of borrowed amounts.  For repayment, use `repaid_all=true` to repay all available amounts
     * @summary Borrow or repay
     * @param unifiedLoan
     */
    public async createUnifiedLoan(
        unifiedLoan: UnifiedLoan,
    ): Promise<{ response: AxiosResponse; body: UnifiedLoanResult }> {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'unifiedLoan' is not null or undefined
        if (unifiedLoan === null || unifiedLoan === undefined) {
            throw new Error('Required parameter unifiedLoan was null or undefined when calling createUnifiedLoan.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedLoan, 'UnifiedLoan'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedLoanResult>(config, 'UnifiedLoanResult', authSettings);
    }

    /**
     *
     * @summary Query loan records
     * @param opts Optional parameters
     * @param opts.type Loan record type: borrow - borrowing, repay - repayment
     * @param opts.currency Query by specified currency name
     * @param opts.page Page number
     * @param opts.limit Maximum number of items returned. Default: 100, minimum: 1, maximum: 100
     */
    public async listUnifiedLoanRecords(opts: {
        type?: string;
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{ response: AxiosResponse; body: Array<UnifiedLoanRecord> }> {
        const localVarPath = this.client.basePath + '/unified/loan_records';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, 'string');
        }

        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UnifiedLoanRecord>>(config, 'Array<UnifiedLoanRecord>', authSettings);
    }

    /**
     *
     * @summary Query interest deduction records
     * @param opts Optional parameters
     * @param opts.currency Query by specified currency name
     * @param opts.page Page number
     * @param opts.limit Maximum number of items returned. Default: 100, minimum: 1, maximum: 100
     * @param opts.from Start timestamp for the query
     * @param opts.to End timestamp for the query, defaults to current time if not specified
     * @param opts.type Loan type: platform borrowing - platform, margin borrowing - margin. Defaults to margin if not specified
     */
    public async listUnifiedLoanInterestRecords(opts: {
        currency?: string;
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
        type?: string;
    }): Promise<{ response: AxiosResponse; body: Array<UniLoanInterestRecord> }> {
        const localVarPath = this.client.basePath + '/unified/interest_records';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(opts.from, 'number');
        }

        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(opts.to, 'number');
        }

        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UniLoanInterestRecord>>(config, 'Array<UniLoanInterestRecord>', authSettings);
    }

    /**
     * Get user risk unit details, only valid in portfolio margin mode
     * @summary Get user risk unit details
     */
    public async getUnifiedRiskUnits(): Promise<{ response: AxiosResponse; body: UnifiedRiskUnits }> {
        const localVarPath = this.client.basePath + '/unified/risk_units';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedRiskUnits>(config, 'UnifiedRiskUnits', authSettings);
    }

    /**
     * Unified account mode: - `classic`: Classic account mode - `multi_currency`: Cross-currency margin mode - `portfolio`: Portfolio margin mode - `single_currency`: Single-currency margin mode
     * @summary Query mode of the unified account
     */
    public async getUnifiedMode(): Promise<{ response: AxiosResponse; body: UnifiedModeSet }> {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedModeSet>(config, 'UnifiedModeSet', authSettings);
    }

    /**
     * Each account mode switch only requires passing the corresponding account mode parameter, and also supports turning on or off the configuration switches under the corresponding account mode during the switch. - When enabling the classic account mode, mode=classic ```  PUT /unified/unified_mode  {  \"mode\": \"classic\"  } ``` - When enabling the cross-currency margin \"multi_currency\",  \"settings\": {  \"usdt_futures\": true  }  } ``` - When enabling the portfolio margin mode, mode=portfolio ```  PUT /unified/unified_mode  {  \"mode\": \"portfolio\",  \"settings\": {  \"spot_hedge\": true  }  } ``` - When enabling the single-currency margin mode, mode=single_currency ```  PUT /unified/unified_mode  {  \"mode\": \"single_currency\"  } ```
     * @summary Set unified account mode
     * @param unifiedModeSet
     */
    public async setUnifiedMode(unifiedModeSet: UnifiedModeSet): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'unifiedModeSet' is not null or undefined
        if (unifiedModeSet === null || unifiedModeSet === undefined) {
            throw new Error('Required parameter unifiedModeSet was null or undefined when calling setUnifiedMode.');
        }

        const config: AxiosRequestConfig = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedModeSet, 'UnifiedModeSet'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     * Interest rates fluctuate hourly based on lending depth, so exact rates cannot be provided. When a currency is not supported, the interest rate returned will be an empty string
     * @summary Query unified account estimated interest rate
     * @param currencies Specify currency names for querying in an array, separated by commas, maximum 10 currencies
     */
    public async getUnifiedEstimateRate(
        currencies: Array<string>,
    ): Promise<{ response: AxiosResponse; body: { [key: string]: string } }> {
        const localVarPath = this.client.basePath + '/unified/estimate_rate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currencies' is not null or undefined
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getUnifiedEstimateRate.');
        }

        localVarQueryParameters['currencies'] = ObjectSerializer.serialize(currencies, 'Array<string>');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<{ [key: string]: string }>(config, '{ [key: string]: string; }', authSettings);
    }

    /**
     *
     * @summary Query unified account tiered discount
     */
    public async listCurrencyDiscountTiers(): Promise<{ response: AxiosResponse; body: Array<UnifiedDiscount> }> {
        const localVarPath = this.client.basePath + '/unified/currency_discount_tiers';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<UnifiedDiscount>>(config, 'Array<UnifiedDiscount>', authSettings);
    }

    /**
     *
     * @summary Query unified account tiered loan margin
     */
    public async listLoanMarginTiers(): Promise<{ response: AxiosResponse; body: Array<UnifiedMarginTiers> }> {
        const localVarPath = this.client.basePath + '/unified/loan_margin_tiers';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<UnifiedMarginTiers>>(config, 'Array<UnifiedMarginTiers>', authSettings);
    }

    /**
     * Portfolio Margin Calculator  When inputting simulated position portfolios, each position includes the position name and quantity held, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. When inputting simulated orders, each order includes the market identifier, order price, and order quantity, supporting markets within the range of BTC and ETH perpetual contracts, options, and spot markets. Market orders are not included.
     * @summary Portfolio margin calculator
     * @param unifiedPortfolioInput
     */
    public async calculatePortfolioMargin(
        unifiedPortfolioInput: UnifiedPortfolioInput,
    ): Promise<{ response: AxiosResponse; body: UnifiedPortfolioOutput }> {
        const localVarPath = this.client.basePath + '/unified/portfolio_calculator';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'unifiedPortfolioInput' is not null or undefined
        if (unifiedPortfolioInput === null || unifiedPortfolioInput === undefined) {
            throw new Error(
                'Required parameter unifiedPortfolioInput was null or undefined when calling calculatePortfolioMargin.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedPortfolioInput, 'UnifiedPortfolioInput'),
        };

        const authSettings = [];
        return this.client.request<UnifiedPortfolioOutput>(config, 'UnifiedPortfolioOutput', authSettings);
    }

    /**
     *
     * @summary Maximum and minimum currency leverage that can be set
     * @param currency Currency
     */
    public async getUserLeverageCurrencyConfig(
        currency: string,
    ): Promise<{ response: AxiosResponse; body: UnifiedLeverageConfig }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_config';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error(
                'Required parameter currency was null or undefined when calling getUserLeverageCurrencyConfig.',
            );
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedLeverageConfig>(config, 'UnifiedLeverageConfig', authSettings);
    }

    /**
     * Get user currency leverage. If currency is not specified, query all currencies
     * @summary Get user currency leverage
     * @param opts Optional parameters
     * @param opts.currency Currency
     */
    public async getUserLeverageCurrencySetting(opts: {
        currency?: string;
    }): Promise<{ response: AxiosResponse; body: Array<UnifiedLeverageSetting> }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<UnifiedLeverageSetting>>(
            config,
            'Array<UnifiedLeverageSetting>',
            authSettings,
        );
    }

    /**
     *
     * @summary Set loan currency leverage
     * @param unifiedLeverageSetting
     */
    public async setUserLeverageCurrencySetting(
        unifiedLeverageSetting: UnifiedLeverageSetting,
    ): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'unifiedLeverageSetting' is not null or undefined
        if (unifiedLeverageSetting === null || unifiedLeverageSetting === undefined) {
            throw new Error(
                'Required parameter unifiedLeverageSetting was null or undefined when calling setUserLeverageCurrencySetting.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedLeverageSetting, 'UnifiedLeverageSetting'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary List of loan currencies supported by unified account
     * @param opts Optional parameters
     * @param opts.currency Currency
     */
    public async listUnifiedCurrencies(opts: {
        currency?: string;
    }): Promise<{ response: AxiosResponse; body: Array<UnifiedCurrency> }> {
        const localVarPath = this.client.basePath + '/unified/currencies';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(opts.currency, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<UnifiedCurrency>>(config, 'Array<UnifiedCurrency>', authSettings);
    }

    /**
     *
     * @summary Get historical lending rates
     * @param currency Currency
     * @param opts Optional parameters
     * @param opts.tier VIP level for the floating rate to be queried
     * @param opts.page Page number
     * @param opts.limit Maximum number of items returned. Default: 100, minimum: 1, maximum: 100
     */
    public async getHistoryLoanRate(
        currency: string,
        opts: { tier?: string; page?: number; limit?: number },
    ): Promise<{ response: AxiosResponse; body: UnifiedHistoryLoanRate }> {
        const localVarPath = this.client.basePath + '/unified/history_loan_rate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getHistoryLoanRate.');
        }

        opts = opts || {};
        if (opts.tier !== undefined) {
            localVarQueryParameters['tier'] = ObjectSerializer.serialize(opts.tier, 'string');
        }

        localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, 'string');

        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(opts.page, 'number');
        }

        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(opts.limit, 'number');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<UnifiedHistoryLoanRate>(config, 'UnifiedHistoryLoanRate', authSettings);
    }

    /**
     *
     * @summary Set collateral currency
     * @param unifiedCollateralReq
     */
    public async setUnifiedCollateral(
        unifiedCollateralReq: UnifiedCollateralReq,
    ): Promise<{ response: AxiosResponse; body: UnifiedCollateralRes }> {
        const localVarPath = this.client.basePath + '/unified/collateral_currencies';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'unifiedCollateralReq' is not null or undefined
        if (unifiedCollateralReq === null || unifiedCollateralReq === undefined) {
            throw new Error(
                'Required parameter unifiedCollateralReq was null or undefined when calling setUnifiedCollateral.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(unifiedCollateralReq, 'UnifiedCollateralReq'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<UnifiedCollateralRes>(config, 'UnifiedCollateralRes', authSettings);
    }
}
