/**
 * Gate API
 * Welcome to Gate API  APIv4 provides operations related to spot, margin, and contract trading, including public interfaces for querying market data and authenticated private interfaces for implementing API-based automated trading.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { LedgerRecord } from '../model/ledgerRecord';
import { UidPushWithdrawal } from '../model/uidPushWithdrawal';
import { UidPushWithdrawalResp } from '../model/uidPushWithdrawalResp';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class WithdrawalApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     * Withdrawals to Gate addresses do not incur transaction fees.
     * @summary Withdraw
     * @param ledgerRecord
     */
    public async withdraw(ledgerRecord: LedgerRecord): Promise<{ response: AxiosResponse; body: LedgerRecord }> {
        const localVarPath = this.client.basePath + '/withdrawals';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'ledgerRecord' is not null or undefined
        if (ledgerRecord === null || ledgerRecord === undefined) {
            throw new Error('Required parameter ledgerRecord was null or undefined when calling withdraw.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(ledgerRecord, 'LedgerRecord'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<LedgerRecord>(config, 'LedgerRecord', authSettings);
    }

    /**
     * Transfers between main spot accounts are allowed; however, both parties cannot be sub-accounts
     * @summary UID transfer
     * @param uidPushWithdrawal
     */
    public async withdrawPushOrder(
        uidPushWithdrawal: UidPushWithdrawal,
    ): Promise<{ response: AxiosResponse; body: UidPushWithdrawalResp }> {
        const localVarPath = this.client.basePath + '/withdrawals/push';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'uidPushWithdrawal' is not null or undefined
        if (uidPushWithdrawal === null || uidPushWithdrawal === undefined) {
            throw new Error(
                'Required parameter uidPushWithdrawal was null or undefined when calling withdrawPushOrder.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(uidPushWithdrawal, 'UidPushWithdrawal'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<UidPushWithdrawalResp>(config, 'UidPushWithdrawalResp', authSettings);
    }

    /**
     *
     * @summary Cancel withdrawal with specified ID
     * @param withdrawalId
     */
    public async cancelWithdrawal(withdrawalId: string): Promise<{ response: AxiosResponse; body: LedgerRecord }> {
        const localVarPath =
            this.client.basePath +
            '/withdrawals/{withdrawal_id}'.replace(
                '{' + 'withdrawal_id' + '}',
                encodeURIComponent(String(withdrawalId)),
            );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'withdrawalId' is not null or undefined
        if (withdrawalId === null || withdrawalId === undefined) {
            throw new Error('Required parameter withdrawalId was null or undefined when calling cancelWithdrawal.');
        }

        const config: AxiosRequestConfig = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<LedgerRecord>(config, 'LedgerRecord', authSettings);
    }
}
