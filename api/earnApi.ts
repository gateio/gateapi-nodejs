/**
 * Gate API v4
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { DualGetOrders } from '../model/dualGetOrders';
import { DualGetPlans } from '../model/dualGetPlans';
import { Eth2Swap } from '../model/eth2Swap';
import { PlaceDualInvestmentOrder } from '../model/placeDualInvestmentOrder';
import { StructuredBuy } from '../model/structuredBuy';
import { StructuredGetProjectList } from '../model/structuredGetProjectList';
import { StructuredGetProjectListRequest } from '../model/structuredGetProjectListRequest';
import { StructuredOrderList } from '../model/structuredOrderList';
import { StructuredOrderListRequest } from '../model/structuredOrderListRequest';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class EarnApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     *
     * @summary ETH2 swap
     * @param eth2Swap
     */
    public async swapETH2(eth2Swap: Eth2Swap): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/earn/staking/eth2/swap';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'eth2Swap' is not null or undefined
        if (eth2Swap === null || eth2Swap === undefined) {
            throw new Error('Required parameter eth2Swap was null or undefined when calling swapETH2.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(eth2Swap, 'Eth2Swap'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Dual Investment product list
     */
    public async listDualInvestmentPlans(): Promise<{ response: AxiosResponse; body: Array<DualGetPlans> }> {
        const localVarPath = this.client.basePath + '/earn/dual/investment_plan';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = [];
        return this.client.request<Array<DualGetPlans>>(config, 'Array<DualGetPlans>', authSettings);
    }

    /**
     *
     * @summary Dual Investment order list
     */
    public async listDualOrders(): Promise<{ response: AxiosResponse; body: Array<DualGetOrders> }> {
        const localVarPath = this.client.basePath + '/earn/dual/orders';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<DualGetOrders>>(config, 'Array<DualGetOrders>', authSettings);
    }

    /**
     *
     * @summary Place Dual Investment order
     * @param placeDualInvestmentOrder
     */
    public async placeDualOrder(
        placeDualInvestmentOrder: PlaceDualInvestmentOrder,
    ): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/earn/dual/orders';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'placeDualInvestmentOrder' is not null or undefined
        if (placeDualInvestmentOrder === null || placeDualInvestmentOrder === undefined) {
            throw new Error(
                'Required parameter placeDualInvestmentOrder was null or undefined when calling placeDualOrder.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(placeDualInvestmentOrder, 'PlaceDualInvestmentOrder'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Cancel Dual Investment order
     * @param orderId Order ID
     */
    public async cancelDualOrder(orderId: number): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath =
            this.client.basePath +
            '/earn/dual/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelDualOrder.');
        }

        const config: AxiosRequestConfig = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Structured Product List
     * @param structuredGetProjectListRequest
     */
    public async listStructuredProducts(
        structuredGetProjectListRequest: StructuredGetProjectListRequest,
    ): Promise<{ response: AxiosResponse; body: Array<StructuredGetProjectList> }> {
        const localVarPath = this.client.basePath + '/earn/structured/products';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'structuredGetProjectListRequest' is not null or undefined
        if (structuredGetProjectListRequest === null || structuredGetProjectListRequest === undefined) {
            throw new Error(
                'Required parameter structuredGetProjectListRequest was null or undefined when calling listStructuredProducts.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(structuredGetProjectListRequest, 'StructuredGetProjectListRequest'),
        };

        const authSettings = [];
        return this.client.request<Array<StructuredGetProjectList>>(
            config,
            'Array<StructuredGetProjectList>',
            authSettings,
        );
    }

    /**
     *
     * @summary Structured Product Order List
     * @param structuredOrderListRequest
     */
    public async listStructuredOrders(
        structuredOrderListRequest: StructuredOrderListRequest,
    ): Promise<{ response: AxiosResponse; body: Array<StructuredOrderList> }> {
        const localVarPath = this.client.basePath + '/earn/structured/orders';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'structuredOrderListRequest' is not null or undefined
        if (structuredOrderListRequest === null || structuredOrderListRequest === undefined) {
            throw new Error(
                'Required parameter structuredOrderListRequest was null or undefined when calling listStructuredOrders.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(structuredOrderListRequest, 'StructuredOrderListRequest'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<StructuredOrderList>>(config, 'Array<StructuredOrderList>', authSettings);
    }

    /**
     *
     * @summary Place Structured Product Order
     * @param structuredBuy
     */
    public async placeStructuredOrder(structuredBuy: StructuredBuy): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath = this.client.basePath + '/earn/structured/orders';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'structuredBuy' is not null or undefined
        if (structuredBuy === null || structuredBuy === undefined) {
            throw new Error(
                'Required parameter structuredBuy was null or undefined when calling placeStructuredOrder.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(structuredBuy, 'StructuredBuy'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }
}
