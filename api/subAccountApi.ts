/**
 * Gate API v4
 * Welcome to Gate API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user\'s behalf.
 *
 * Contact: support@mail.gate.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { SubAccount } from '../model/subAccount';
import { SubAccountKey } from '../model/subAccountKey';
import { SubUserMode } from '../model/subUserMode';
import { ObjectSerializer } from '../model/models';
import { ApiClient } from './apiClient';
import { AxiosRequestConfig, AxiosResponse } from 'axios';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class SubAccountApi {
    protected client: ApiClient;

    constructor(client?: ApiClient) {
        if (client) {
            this.client = client;
        } else {
            this.client = new ApiClient();
        }
    }

    /**
     *
     * @summary List sub-accounts
     * @param opts Optional parameters
     * @param opts.type &#x60;0&#x60; to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  &#x60;1&#x60; to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default.
     */
    public async listSubAccounts(opts: {
        type?: string;
    }): Promise<{ response: AxiosResponse; body: Array<SubAccount> }> {
        const localVarPath = this.client.basePath + '/sub_accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(opts.type, 'string');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<SubAccount>>(config, 'Array<SubAccount>', authSettings);
    }

    /**
     *
     * @summary Create a new sub-account
     * @param subAccount
     */
    public async createSubAccounts(subAccount: SubAccount): Promise<{ response: AxiosResponse; body: SubAccount }> {
        const localVarPath = this.client.basePath + '/sub_accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'subAccount' is not null or undefined
        if (subAccount === null || subAccount === undefined) {
            throw new Error('Required parameter subAccount was null or undefined when calling createSubAccounts.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(subAccount, 'SubAccount'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<SubAccount>(config, 'SubAccount', authSettings);
    }

    /**
     *
     * @summary Get the sub-account
     * @param userId Sub-account user id
     */
    public async getSubAccount(userId: number): Promise<{ response: AxiosResponse; body: SubAccount }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSubAccount.');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<SubAccount>(config, 'SubAccount', authSettings);
    }

    /**
     *
     * @summary List all API Key of the sub-account
     * @param userId Sub-account user id
     */
    public async listSubAccountKeys(userId: number): Promise<{ response: AxiosResponse; body: Array<SubAccountKey> }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/keys'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listSubAccountKeys.');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<SubAccountKey>>(config, 'Array<SubAccountKey>', authSettings);
    }

    /**
     *
     * @summary Create API Key of the sub-account
     * @param userId Sub-account user id
     * @param subAccountKey
     */
    public async createSubAccountKeys(
        userId: number,
        subAccountKey: SubAccountKey,
    ): Promise<{ response: AxiosResponse; body: SubAccountKey }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/keys'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createSubAccountKeys.');
        }

        // verify required parameter 'subAccountKey' is not null or undefined
        if (subAccountKey === null || subAccountKey === undefined) {
            throw new Error(
                'Required parameter subAccountKey was null or undefined when calling createSubAccountKeys.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(subAccountKey, 'SubAccountKey'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<SubAccountKey>(config, 'SubAccountKey', authSettings);
    }

    /**
     *
     * @summary Get the API Key of the sub-account
     * @param userId Sub-account user id
     * @param key The API Key of the sub-account
     */
    public async getSubAccountKey(
        userId: number,
        key: string,
    ): Promise<{ response: AxiosResponse; body: SubAccountKey }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSubAccountKey.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getSubAccountKey.');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<SubAccountKey>(config, 'SubAccountKey', authSettings);
    }

    /**
     *
     * @summary Update API key of the sub-account
     * @param userId Sub-account user id
     * @param key The API Key of the sub-account
     * @param subAccountKey
     */
    public async updateSubAccountKeys(
        userId: number,
        key: string,
        subAccountKey: SubAccountKey,
    ): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateSubAccountKeys.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling updateSubAccountKeys.');
        }

        // verify required parameter 'subAccountKey' is not null or undefined
        if (subAccountKey === null || subAccountKey === undefined) {
            throw new Error(
                'Required parameter subAccountKey was null or undefined when calling updateSubAccountKeys.',
            );
        }

        const config: AxiosRequestConfig = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: ObjectSerializer.serialize(subAccountKey, 'SubAccountKey'),
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Delete API key of the sub-account
     * @param userId Sub-account user id
     * @param key The API Key of the sub-account
     */
    public async deleteSubAccountKeys(userId: number, key: string): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteSubAccountKeys.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling deleteSubAccountKeys.');
        }

        const config: AxiosRequestConfig = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Lock the sub-account
     * @param userId The user id of the sub-account
     */
    public async lockSubAccount(userId: number): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/lock'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling lockSubAccount.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     *
     * @summary Unlock the sub-account
     * @param userId The user id of the sub-account
     */
    public async unlockSubAccount(userId: number): Promise<{ response: AxiosResponse; body?: any }> {
        const localVarPath =
            this.client.basePath +
            '/sub_accounts/{user_id}/unlock'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling unlockSubAccount.');
        }

        const config: AxiosRequestConfig = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<any>(config, '', authSettings);
    }

    /**
     * Unified account mode： - `classic`: Classic account mode - `multi_currency`: Multi-currency margin mode - `portfolio`: Portfolio margin mode
     * @summary Get sub-account mode
     */
    public async listUnifiedMode(): Promise<{ response: AxiosResponse; body: Array<SubUserMode> }> {
        const localVarPath = this.client.basePath + '/sub_accounts/unified_mode';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }

        const config: AxiosRequestConfig = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };

        const authSettings = ['apiv4'];
        return this.client.request<Array<SubUserMode>>(config, 'Array<SubUserMode>', authSettings);
    }
}
